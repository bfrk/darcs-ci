Just "\nContext:\n\n\n[harness: remove the HashedStorage tests from --full\nBen Franksen <ben.franksen@online.de>**20220420175455\n Ignore-this: 513447d2d27f0e6d43f33a2a332e7b371cf3e97afcff39e8918061dddf85b0ed8b346e6fc630d5e\n \n These unit tests aren't re-entrant and thus tend to fail with -j. I venture\n that nobody runs the tests with --full without using all available cores\n because that would take ages to complete.\n] \n\n[ci: set DARCS_CONNECTION_TIMEOUT to avoid timeouts with darcs.net\nBen Franksen <ben.franksen@online.de>**20220613094347\n Ignore-this: de89e83c3d0e6e4258ed0c7955113eb18299ef2059ff803440f34812ac3098569fd36562d65f5a85\n] \n\n[whatsnew: remove display of context lines in interactive mode\nBen Franksen <ben.franksen@online.de>**20211116114055\n Ignore-this: 72ff902d7b17956ed0652ad8dd0f00a259bac8d530b41136d324728a4fcfa6700ed887662ab49886\n \n As with other commands, context lines cannot be correctly displayed in\n interactive mode because we don't (currently) track which changes have been\n applied.\n] \n\n[whatsnew -u: print output with pager if non-interactive\nBen Franksen <ben.franksen@online.de>**20211116101543\n Ignore-this: 7b33f03a46fef5334916b3354bc1576fbd94eb77c8c6a1dd3ecc06f82dd44e9f2e34ecd0816eb6ba\n] \n\n[push: replace parseFlags with ?-operator\nBen Franksen <ben.franksen@online.de>**20210913094029\n Ignore-this: f7af4c329f1b1700d458c8776fda77c2afda6c669dd94e023abc40f926353fe8d72fac0cf4dc7755\n] \n\n[replace: allow only printable ASCII characters in the token spec\nBen Franksen <ben.franksen@online.de>**20210918090705\n Ignore-this: a5b4c116bb10a295f71ef30436d4f39d11bf6899ad5674f6974cae18a5a52cd0d4cad6fcbd71634a\n \n This enforces a limitation that was previously not checked and could lead to\n corrupt patches.\n] \n\n[inline some trivial functions in D.UI.Cs.Unrecord\nBen Franksen <ben.franksen@online.de>**20210722184836\n Ignore-this: a0244520f7578c822cd5e111d239f3162085a77eb83f4b42c15885f11649c05f1ae759d30b3fcbf0\n] \n\n[re-format Darcs.UI.Commands.Send.sendBundle\nBen Franksen <ben.franksen@online.de>**20210622124351\n Ignore-this: 79c6f632f24e800db99da9941a05ac7395c1134fa12832eeab0b11bfbc3c5b81ea7033e6d771fe1\n] \n\n[rename PatchTree to PatchSeq\nBen Franksen <ben.franksen@online.de>**20210619072740\n Ignore-this: d85d8ed86763a82296fd2d1e8bda8a10eadc9cc8244627179f62b1af7474a571caf5c52cb2f7b8c2\n \n This is about the PatchTree defined by the implementation of the test\n command. The renaming was done because semantically it is a sequence with\n guaranteed O(1) concatenation.\n] \n\n[allow rebase unsuspend when there are unrecorded changes\nBen Franksen <ben.franksen@online.de>**20210302205215\n Ignore-this: 175b38f92b2e0927b807a56cff680debb3d1856d2caba624ab8dd4b1eaced3d84772d26a3328e8b8\n \n We still fail if the effect of the unsuspended patches (including the\n resolution for any residual fixups) conflicts with unrecorded.\n] \n\n[rebase unsuspend: code layout and a few renamings\nBen Franksen <ben.franksen@online.de>**20210302185613\n Ignore-this: 7301a87235935506314c35baedd42387e7cd1abc298a1c61631b3fdc72dfadd2b3367c44a16bd7cc\n] \n\n[fix: add missing dry-run guards when calling applyToWorking\nBen Franksen <ben.franksen@online.de>**20210302141145\n Ignore-this: 7a1765bc2e8f8295f6d289c4489a3d3bcd399183e1c8f1ddb7e9754f1a33512af641c9332f5a8915\n \n applyToWorking is done after we finalize the transaction, indeed it isn't\n guarded by the transaction at all, since we cannot enforce mutual exclusion\n in the working tree.\n] \n\n[refactor rebase unsuspend\nBen Franksen <ben.franksen@online.de>**20210302184810\n Ignore-this: f0d1722fd9abbf0da5cf527271a71d52189c329cf127b666dd5fc0079113fb6ac9fabd02a336c49c\n \n The local function hijack that replaces the previous doAdd is more modular.\n It gets the selected suspended patches and those we want to keep as input\n and outputs a changed pair where the the patches to be unsuspended have been\n renamed. We then add these patches to the repo without updating the pending\n patch, so we can afterwards directly set pending to the resolution.\n \n For reasons that are mysterious to me, coercing just the added renames after\n commuting them no longer works; the mere act of matching the type of the\n rename patch introduces a fresh type variable for the underlying patch type.\n] \n\n[remove command: fix code layout of makeRemovePatch\nBen Franksen <ben.franksen@online.de>**20210306081307\n Ignore-this: 3c304915cb90f06dadd0b983c8b6e2c1ffddb86159b396a7e542cbd32cf46e5eab3e32d76e84fade\n] \n\n[push command: simplify some type signatures\nBen Franksen <ben.franksen@online.de>**20210306155755\n Ignore-this: d33ae7076991232fb40a0f3bb39582d95bb6ef49c609bdaec14107d1e23b45571414ce90004b0a50\n] \n\n[clean up getRecordedUpToMatch and the commands that use it\nBen Franksen <ben.franksen@online.de>**20210306120104\n Ignore-this: 98887f4d9c62a71ae04795aa300e557c88dae8a66095c5f5d3bd50844da585fecca1f582e1b527\n \n The procedure now returns a tree and has been renamed to\n getPristineUpToMatch. The commands that use it (dist, show files, show\n contents) now work directly with the resulting tree, rather than a freshly\n created temporary working directory. This is a lot simpler and more\n efficient. Incidentally, it allows to easily support match options for\n --zip.\n \n However, the predist command expects to be run inside a working tree. So we\n write out the tree to a temporary directory before the predist and read it\n back in afterwards. The extra cost of this is payed only if a predist\n command has been set (using setpref predist).\n] \n\n[fix TODO item in remove command\nBen Franksen <ben.franksen@online.de>**20210306083156\n Ignore-this: be3afd76238a64f34c901ad96dc98509d44042c6a90e698317d3cb9b8d4dfdc62f9ddbac796f910f\n] \n\n[remove out-commented code in D.UI.C.Repair\nBen Franksen <ben.franksen@online.de>**20210324060633\n Ignore-this: 9011bab75c4606569b79622691514c6dbee913d0b9bcd6aed72f4ccde433971a5f49ad7f9a95fdb6\n] \n\n[unrevert: simplify by swapping mergeThem -> findCommonAndUncommon\nBen Franksen <ben.franksen@online.de>**20210723113431\n Ignore-this: 873f5487ff4990855c1e9e1e7416e1f06a0097062aa1f7b6f80224e116782985700675c9a16b4320\n] \n\n[remove tree parameter from writeUnrevert\nBen Franksen <ben.franksen@online.de>**20210723084319\n Ignore-this: 7b78dcc3d61fa8349094fad0a55f82668a996872154e80102168b4a39517022060d6aaab63c23508\n] \n\n[trivial refactor in D.R.Unrevert for better readability\nBen Franksen <ben.franksen@online.de>**20210306060231\n Ignore-this: 33b6dab0bdf4c7833846f97e9ba629d94924df46e9456e6a714fe70323b2caf09b9bd5f38b1a374b\n] \n\n[rename unrevertPatchBundle to readUnrevert\nBen Franksen <ben.franksen@online.de>**20210325082039\n Ignore-this: 90e0bfd9e1cb4711e33a8a351fcec1f58d9b0136740ff7a1468e1057204c35c2372316d7c53074cf\n] \n\n[harness: more cleanups for the shell test implementation and setup\nBen Franksen <ben.franksen@online.de>**20220522105130\n Ignore-this: 2ee08904c306a3e136c3c4119794d80b7d839b6fc00a1f51d395d19a94a47abd8d1bbba6d7adf45a\n] \n\n[harness: split off Darcs.Test.Shell and clean up what remains\nBen Franksen <ben.franksen@online.de>**20220522074138\n Ignore-this: acdd0e4060172f7719c4b4ad78793f93c59ddd56b2ab10b555a92b54e5c460d468e8e5d2b1b334b3\n] \n\n[ci: fix order of tasks to allow caching of dist-newstyle\nBen Franksen <ben.franksen@online.de>**20220612224449\n Ignore-this: 524a9a5fd463bd781d2904f2d61f7153a49572f0a9514fff3f296f203b6be1204bd2c6a5580f789d\n] \n\n[option not to fill _darcs/prefs/* files with templates\nMaksim Golubev <maksim.golubev72@gmail.com>**20211225165428\n Ignore-this: 3f1f66995bff8ed88760c8a5b7da3ef8a3a48c262848c348a7011a6a3cdc3ee133e95ac30ac68d62\n \n With new `--no-prefs-templates` command line argument you can\n leave `_darcs/prefs/[boring|binaries]` files not filled with\n default templates when creating new repository with `initialize`,\n `clone`, `convert darcs-2`, or `convert import` commands.\n \n It is useful when you prefer to maintain corresponding settings\n globaly and use repository specific settings only for cases\n related to that particular repository.\n] \n\n[always apply `_darcs/prefs/[boring|binaries]`\nMaksim Golubev <maksim.golubev72@gmail.com>**20211220004844\n Ignore-this: 1702e7beb882e7411ad07098fb9a5c9184d672cd76201692ceaaebe6857adfb900827c4050245011\n \n Always aplly `boring` and `binaries` files from `_darcs/prefs` direcory\n even if there are explicit settings for the corresponding prefs.\n There is no reason not to use these files. If there are explicit settings\n using `darcs setpref [boring|binaries]`, these files remain the only possible\n way to set the appropriate settings personally at the repository level,\n and not globally.\n] \n\n[fix haddocks of D.R.Util.Path.makeRelativeTo\nBen Franksen <ben.franksen@online.de>**20220612221847\n Ignore-this: 23b2a181fb323cc53349dd8d657d014e3b1b914d0a673170f315317e0c187e25d914b83bee198c1c\n] \n\n[remove no longer used isMaliciousSubPath\nBen Franksen <ben.franksen@online.de>**20220612220958\n Ignore-this: 54b1e88dd27e95d48b7fe20a89f9eceaa19297e5c828d6146c25b8119efc721a4d49a97eaf4e478f\n] \n\n[tests/lib: disable use of hspwd.hs\nBen Franksen <ben.franksen@online.de>**20220513071917\n Ignore-this: aea9d0d0b9df387c88c2fde5013316ccf1e07c74e7b60ec019b72385e5b473b09c666136de2237b2\n \n With the recent changes in file path handling this is no longer needed.\n] \n\n[remove obsolete Darcs.Util.Path.internalMakeName\nBen Franksen <ben.franksen@online.de>**20220513104902\n Ignore-this: a71478539dc235c75d4a294c5112e212d7d1a5280d71c8112e1d94d3111c9a78b79746adaf3de8b2\n] \n\n[fix validation of paths from command line\nBen Franksen <ben.franksen@online.de>**20220513083454\n Ignore-this: ef336847facef2dfaf35212d5f78a6d2b15f02e81305125062780da03f01b5a19d905f7e8b2f2fd8\n \n The new procedure makeRelativeTo no longer reduces all occurrences of \"..\"\n if they occur in a non-existing trailing part of the input path. This means\n we could run into error calls when calling floatSubPath on SubPaths\n resulting from that. So we need to propagate these errors and catch them at\n the call sites.\n] \n\n[make errors in Darcs.Util.Path.decodeWhite explicit\nBen Franksen <ben.franksen@online.de>**20220513104155\n Ignore-this: 8a95a999317b6cf328090235b9600ef8a9ddaa25b8593f40a284dafdaf9fce7b8ccf7c571a0e665d\n \n This means we no longer trust that path names in patches have valid\n white-space encoding. Instead this is now a proper parse error.\n] \n\n[Darcs.Util.Path: add missing HasCallStack constraints\nBen Franksen <ben.franksen@online.de>**20220513104710\n Ignore-this: 4515c914e343ababdc8d5320aa7e05ffd3824a0f6c75fccd1115fc2f6098551e6b5725c48d3075b8\n] \n\n[fix all symlink problems, including Windows\nBen Franksen <ben.franksen@online.de>**20220512101051\n Ignore-this: 24a0d192cfb8018b7766f2bd430d4e01115d3beb4e8be9f997421b6d7bf3e9eb2f817e125a75925e\n] \n\n[enable running all symlink tests on Windows\nBen Franksen <ben.franksen@online.de>**20220513072218\n Ignore-this: 746991310507bf4ccf6fa1d252149c45af682e6cb9c512a54f2551bbb020b91acd42cbb9f5d6de4e\n \n The only exception is when we use mkfifo in\n tests/issue1645-ignore-symlinks.sh which is very much specific to Posix.\n] \n\n[require unix-compat >= 0.6 for improved symlink support\nBen Franksen <ben.franksen@online.de>**20220522162140\n Ignore-this: cdbc5626bc3492de57e7fcd20edfa9ff867304ee55f8ec2e4251a28df19f446851ccd8268cc240f1\n] \n\n[derive instance Show PatchInfo\nBen Franksen <ben.franksen@online.de>**20220514174741\n Ignore-this: 5c2d644dbc4d88292782a550b04593be6e26a2c350d4545341a157deeee7ecdd7c2e4149d6928418\n \n The manually written instance turned out to be useless for debugging the\n property test failure caused by an error in arbitraryUTF8PatchInfo. Also\n note that we already export the data constructor for testing.\n] \n\n[harness: fix arbitraryUTF8PatchInfo\nBen Franksen <ben.franksen@online.de>**20220514174622\n Ignore-this: c24b28fec73dc58c20d7eedeb8ac7baf880f4fb7464b1dc4bd14b88f0b33e4b20f7c6ec0588e84c4\n \n Otherwise propMetadataEncoding may (and does) fail.\n] \n\n[tests/lib: make 'not' fail if command returns 4\nBen Franksen <ben.franksen@online.de>**20220513203406\n Ignore-this: 992795ab972e845f25f9c68cee09fab9b25eddb8ed83a3dbe29c86b79514febb27e61a2161028c7c\n \n This exit code is returned by darcs when the top-level handler receives an\n ErrorCall exception. This signifies a bug in darcs, so should be treated as\n failure of the test even if the script uses 'not' to indicate that darcs is\n expected to fail.\n] \n\n[harness: set environment so we can test symlinks on Windows\nBen Franksen <ben.franksen@online.de>**20220513071746\n Ignore-this: 35ad96c8c20c3904124a04a874a6987073a1b4a8d1df3b005903d1262db1825b4dc5c525da9d7b1e\n \n See the URL in the comment for why this is needed.\n] \n\n[extend, generalize, and rename tests/issue1057.sh\nBen Franksen <ben.franksen@online.de>**20220509235618\n Ignore-this: 890cacc6bc914abea294577aa6e95ae44ea332d2294e4002ba0d794c5d157186f5e594da772a5903\n] \n\n[extend and generalize test for issue1078\nBen Franksen <ben.franksen@online.de>**20220505131910\n Ignore-this: 7a7b92fcb395e761a39533814bd5e029cdfc1053e799209ca92aebca4c6e04fc02f5bc8b6cbbac0c\n] \n\n[add two clarifying comments\nBen Franksen <ben.franksen@online.de>**20220509235442\n Ignore-this: 498c1be6329e3afb3375c18d98d5fd826359158c08b1dfd908d1e1f30892512caf3d8991b38b277d\n] \n\n[Darcs.Util.ByteString: use the portable System.Directory.getFileSize\nBen Franksen <ben.franksen@online.de>**20220507162917\n Ignore-this: 5941d4646fd9ca57e59b7547d312325f392db7c4ea1047718a393e3e585a6d98aeb8e7207b6363f9\n \n Used to get file size in the error handlers for readSegment and mmapFilePS.\n I guess this is also a bug fix, since in case the file is a symbolic link we\n really want the size of the link target here, not that of the link itself.\n] \n\n[simplify tests/issue2275_follows-symlinks.sh\nBen Franksen <ben.franksen@online.de>**20220507073919\n Ignore-this: 5a6f6bb414afcbbcb1e41722a8c71fd94d00373a2ee5642823230b948a1a02533beeea137c9e0fb6\n \n The test harness nowadays can be run with index enabled and/or disabled so\n we don't need to provide for that in the test script itself.\n] \n\n[remove Darcs.Util.Compat.canonFilename\nBen Franksen <ben.franksen@online.de>**20220430082509\n Ignore-this: ddc62418584efba013ef23626128578d7c8b75cd2a798d4560c6df8953c818972645689446e056e8\n \n It's (few) uses were replaced with either makeAbsolute or canonicalizePath\n from System.Directory.\n] \n\n[harness: use runghc for hspwd instead of compilation\nBen Franksen <ben.franksen@online.de>**20220505182645\n Ignore-this: 92c2ce174c2e860af2547624acf81c44ba4547c4d9c0ac4795c98a9d17845288fabbfea121f3ccfb\n \n This fixes occasional CI test failures that say\n \n ghc --make -o hspwd /home/runner/work/darcs-ci/darcs-ci/tests/bin/hspwd.hs\n /home/runner/work/darcs-ci/darcs-ci/tests/bin/hspwd.o.tmp:\n renameFile:renamePath:rename: does not exist (No such file or directory)\n ./hspwd\n lib: line 32: ./hspwd: No such file or directory\n] \n\n[refactor askAboutDepends and updatePatchHeader\nBen Franksen <ben.franksen@online.de>**20201103184646\n Ignore-this: 2b0a19d8493f0a6195954633337e4169f02ed61ac6304e690f808de5947d6aa6780ac51517a8d94f\n \n My immediate goal with this was to avoid making repository requests inside\n updatePatchHeader. Thus AskAboutDeps now contains a PatchSet instead of a\n Repository. But for the amend command the patchset we pass in is not the\n recorded patches but rather the recorded patches minus the selected patch.\n So we have to reconstruct this patchset. This is best done by not throwing\n away patches in the first place, but instead return unselected patches from\n filterNotInRemote as well as withSelectedPatchFromList. Incidentally this\n fixes a problem when we de-select the latest clean tag: before this patch\n amend would print all patches in the repo. This is now avoided by calling\n contextPatches when --not-in-remote is /not/ in effect.\n] \n\n[update outdated dependencies\nBen Franksen <ben.franksen@online.de>**20220531193246\n Ignore-this: 32d63f227ee432cc76a54fce8f0629bd841b86a5fccfcf8e05b7f5e64c4bb28caf25a968c29d9cbd\n] \n\n[fix or suppress warnings new in ghc-9.2\nBen Franksen <ben.franksen@online.de>**20220425141013\n Ignore-this: c5f398bde16c8032ef9c8e267a4d0cd2ca2a3d2609b0e5507c7d8a9bb2fddc96f33ba6850b58c1fe\n \n This is about -Wincomplete-record-updates and -Wincomplete-uni-patterns. I\n bothered to actually fix the code only where this wasn't too much hassle and\n suppressed the warnings elsewhere.\n] \n\n[support ghc-9.2\nBen Franksen <ben.franksen@online.de>**20220425140808\n Ignore-this: 3d1002c6d2c874adb011e6a46f2d7560ec4020397236fc1cdd721b3fc584166b27875074cbe62dd6\n] \n\n[fix and reactivate test for issue1599\nBen Franksen <ben.franksen@online.de>**20220522114117\n Ignore-this: 8645d57a6e0a3f3943fa0477264b53b7f63e04c70816d055547c04d08b9a6ca72e2231bcd12ba1e2\n \n The test had a missing 'darcs tag' command to set up the repo, since w/o a\n tag the clone is not really lazy. Then it tested the wrong thing by relying\n on debug output which no longer gets issued. The underlying issue has indeed\n been resolved by the patch that claims so.\n] \n\n[restore functionality of DARCS_CONNECTION_TIMEOUT env var\nBen Franksen <ben.franksen@online.de>**20220522105447\n Ignore-this: b2b4bfa2f485f22fc6d6c6f238a1f28af512b691ce408cd73aae90bb1ff94b0c1730688f8054d6ed\n \n This was lost when we threw out downloading via curl. It is actually a\n response timeout now but I kept the name for compatibility.\n] \n\n[fix: hard-linking between repo and cache should be entirely optional\nBen Franksen <ben.franksen@online.de>**20220525215234\n Ignore-this: 38a7d6c899ed53f6f4e6f33eb9ee1345381a5cb57ce4e81694cec4df45a38bdc3d3035e93ea1cd88\n \n This fixes a bug introduced in\n \n patch 018c5978374ec2cb3ae4f918d733da948bda73da\n Author: Ben Franksen <ben.franksen@online.de>\n Date:   Mon Nov  9 15:47:50 CET 2020\n   * improve cache utilization\n \n tryLinking catches only \"does not exist\" errors, so when hard-linking is\n optional, such as after we wrote the file to the repo, we should catch all\n exceptions. Note that tryLinking is *supposed* to throw exceptions, the\n logic in writeFileUsingCache depends on it.\n \n This came up in a situation where the repo and cache happened to be on\n different file systems, which caused most darcs commands to fail. I added a \n line to tests/lib to run the tests in such a scenario, but it depends on a\n particular system setup and is therefore commented out.\n] \n\n[document and cleanup Darcs.Util.File\nBen Franksen <ben.franksen@online.de>**20220521104856\n Ignore-this: 7f56e7ba180d1f34b063e52aaadd58857087e580017d6b443791c2beac2ec41aba751ca5d99b466a\n] \n\n[move osxCacheDir and xdgCacheDir to D.R.Prefs\nBen Franksen <ben.franksen@online.de>**20220521101952\n Ignore-this: e06aecfea9997c8371f5712efbb6f7c9d573761472ce00c98e0de4b930f545b99cdd80a351a9af0c\n] \n\n[hlint Darcs.Util.Cache\nBen Franksen <ben.franksen@online.de>**20220521192202\n Ignore-this: 210c5a7dae41c459a9880a5e3e58883da866e0a39ec9cf0a958c9da460580462e9131420ab24e412\n] \n\n[move all of Darcs.Util.External to Darcs.Util.File\nBen Franksen <ben.franksen@online.de>**20220521095228\n Ignore-this: d7362ce863ada7367a0a8a67e8b29263f4d88de75187a2bae89a47a8db842bfd628952dbff8f850e\n \n To break an import cycle this also moves withTemp and withOpenTemp\n from darcs.Util.Lock to Darcs.Util.File.\n] \n\n[remove obsolete src/hscurl.*\nBen Franksen <ben.franksen@online.de>**20220522105315\n Ignore-this: 44d5de00ad7ef34e0b9fdbeca052290b7e731c9836b171ca861beb6568c9bab6571de5a944c1f049\n] \n\n[hlint Darcs.Util.Lock\nBen Franksen <ben.franksen@online.de>**20220521192223\n Ignore-this: 7f7981bc933b26245acdd6a64f8546f67a7901c2e36517f1474c3838d81606f619063871e8cf05b3\n] \n\n[rename cloneXxx to copyXxx, remove cloneFile\nBen Franksen <ben.franksen@online.de>**20220521084938\n Ignore-this: 64e3f5e8b0f4357620a722ce96c247f8460458b67f172f6f8548ec93fd8446a5d26d45de5da5e00\n] \n\n[darcs.cabal: remove duplicate build-depends entry\nBen Franksen <ben.franksen@online.de>**20220521084359\n Ignore-this: dae9a4871ca6d2738f0fbabf0e2170e7c6b879b68335695829184fe816bf7d93a84ed86a0be5556c\n] \n\n[Darcs.Util.Path.pathToPosix: avoid mapping id on Posix\nBen Franksen <ben.franksen@online.de>**20220513104747\n Ignore-this: d9c581ba9151e39d247bb7ece6087f335da5bbacbf7329d975b6437e311548e0bbaa3719e6cb82d2\n] \n\n[remove unused Darcs.Utile.Path.breakOnDir\nBen Franksen <ben.franksen@online.de>**20220513101558\n Ignore-this: 9c126068812a15f8a2137f18c8d529e727afabcca614e26e7615abf11a1599ae460b5c22a791a427\n] \n\n[tests: some trivial cleanups\nBen Franksen <ben.franksen@online.de>**20220513071541\n Ignore-this: 98af812d10e8f72abd8f93bbb880865b24b42dbf2f168f7dd9ae3153a2b45af09770829849082517\n] \n\n[ci: use haskell/actions/setup@v2\nBen Franksen <ben.franksen@online.de>**20220513053948\n Ignore-this: 2689b247a9d69c42dcf3b465f2d2caf2514a9f4957e9ed501a5ff7c3d2c098dd6b3a95f9d25aa0b6\n] \n\n[ci: run tests with i=yn and --hide\nBen Franksen <ben.franksen@online.de>**20220513053928\n Ignore-this: 49c0a33e1d5aded4974866df9be66100a94093fd0eaac0c19ac9f607b7f20698422824efc36d175f\n] \n\n[remove obsolete use of Windows #ifdefs in Darcs.Util.File\nBen Franksen <ben.franksen@online.de>**20220509170048\n Ignore-this: b1225f38ec25c2ebe5f35a3d44198c93dbde99e2b72d70265fcb4d9938e739801ae23536808142aa\n] \n\n[enable tests/utf8-display on Windows\nBen Franksen <ben.franksen@online.de>**20220505182502\n Ignore-this: 532754ce83e354d8989518d23b9766c07c14cfa3b7a7deb820a02db1232cfe54970e343971973847\n \n The test succeeds on Windows in the CI.\n] \n\n[rollback of \"work-around to allow build with ghc >= 9.0 on Windows\"\nBen Franksen <ben.franksen@online.de>**20220505182316\n Ignore-this: aaf76aaf4a4fc8df8a6fdf9380eb2d25bff76626905d8ff2ec57b5aedf1804935ffe5970a1df765b\n \n The cabal problem was fixed upstream (in ansi-terminal-0.11.2).\n] \n\n[rollback 856baf0c aka \"Fix darcs-test on Win32 + GHC 6.12+.\"\nBen Franksen <ben.franksen@online.de>**20220501124047\n Ignore-this: 8cc3659e7fa28dbe294ba7247ea827ce56efddfda94353789abdecbc76a67b4c70a7c5c40d5cec0f\n \n This is no longer needed and improves display of paths if they contain\n non-ASCII characters.\n] \n\n[tests/latin9-input.sh: remove obsolete code\nBen Franksen <ben.franksen@online.de>**20220501131342\n Ignore-this: 8674f9fe2a703781e032f040ac1b893661f31ec1fb402637d48ed28604f5e14fa13bae04045cd5d\n] \n\n[tests/lib: fix definition of 'which'\nBen Franksen <ben.franksen@online.de>**20220501131022\n Ignore-this: f666f22e31235ccce3751998838c83380959520e7937b8088da98d719c2d7d973da201b92353547c\n \n In bash, 'type -P x' returns the full path where executable 'x' was found\n and nothing else.\n] \n\n[harness: fix output of darcs executable under test\nBen Franksen <ben.franksen@online.de>**20220501130633\n Ignore-this: b37fa071f7b9597cf5199f223dd5ecb34a1dc2bef9a28cd3c57ea69f359f6a5b3e77cbaa6af0c865\n \n Since it says \"Using darcs executable in\" I expect to see the directory in\n which the darcs executable was found.\n] \n\n[harness: fix quoting env stuff for shell evaluation\nBen Franksen <ben.franksen@online.de>**20220501124245\n Ignore-this: f317da9fa9e9d46ff7656161bb2e6159a14a0fc92542e8ec1a3cc854bc0a66f6c67c3c6abf1ae8b6\n \n Using 'show' here is just wrong (it fails with spaces or non-ASCII\n characters).\n] \n\n[Darcs.Util.Index: fix outdated haddocks\nBen Franksen <ben.franksen@online.de>**20220430092938\n Ignore-this: 5d47c0385dd977a28118f9a38e80ad6c589d7dfd9e2c1b9d0dcbd1e66c3f85a4f4b73ce39f00300f\n] \n\n[.stylish-haskell.yaml: don't break single-constructor records\nBen Franksen <ben.franksen@online.de>**20220429120907\n Ignore-this: 8125c7f3bebfe58acc589f50ba2551ec0d452dc6fe332d1ea182c41caf47cff32594da54f076895d\n] \n\n[catch all IOErrors when removing temporary directories\nBen Franksen <ben.franksen@online.de>**20211122085340\n Ignore-this: 63004ebf109bdb034ea6a8cb94086cca9174fa5d754704905b0e957f6595c1a53eadc3f80a6ed85c\n \n I have occasionally observed tests failing in the CI that say\n \n  darcs: /tmp/darcs.log-75c76c279e1ab188_done/_darcs/patches:\n  removePathForcibly:removePathForcibly:removePathForcibly:removeDirectory:\n  unsatisfied constraints (Directory not empty)\n \n Catching these exception is justified because this is mere cleanup. Note\n that we already do the same thing in the cleanup part of withNewDirectory.\n] \n\n[remove a duplicate import\nBen Franksen <ben.franksen@online.de>**20211122085313\n Ignore-this: c07c83bb54d94eb9cf0fee1daee585dbfcf018184367fbd0da6a92c1e768c1537ffa51b4cbba1949\n] \n\n[re-apply our changes to .stylish-haskell.yaml\nBen Franksen <ben.franksen@online.de>**20220429112542\n Ignore-this: b407b51bdeff6faa01c48ac9afa4ae1da7e1653c4f62baaf488c3258768abce4f50083bfb2cd02d1\n] \n\n[re-create .stylish-haskell.yaml with version 0.13\nBen Franksen <ben.franksen@online.de>**20220429112418\n Ignore-this: 91edbe86eed9b38cba2291243948c39c56d4b8f4a7a81c97f509e7b75f9ae98691bf69fdf0627f8e\n] \n\n[work-around to allow build with ghc >= 9.0 on Windows\nBen Franksen <ben.franksen@online.de>**20220428120533\n Ignore-this: fa4d0d9c76dbc968f633f18433f1241e0140590b1f2b0178fe4b7cf655cb3fc4669fea8a05260d2a\n \n We indirectly depend on ansi-terminal, with ghc-9.0 cabal picks 0.11.1 which\n is missing a lower bound on its Win32 dependency (has been reported upstream\n and will be fixed soon). This makes it hard to write correct cabal file for\n all supported ghc versions. The work-around is to reject version 0.11.1 of\n ansi-terminal.\n] \n\n[use fixUrl in clone command instead of ioAbsoluteOrRemote and toPath\nBen Franksen <ben.franksen@online.de>**20220427091826\n Ignore-this: 72d0545d6cbd17e66c5e1c5b3b286846a206151b44b79e572a34358ff2d0de10058572495a17e842\n \n This is how it is done for most other commands that take repository\n locations as argument.\n] \n\n[simplify addRepoSource by using getDefaultRepo\nBen Franksen <ben.franksen@online.de>**20220427091736\n Ignore-this: a8090eb56256840be9cc7a667277b27dd6acac6ad924e16efcef9e9a3eca529bd9854cf79bdc5f00\n] \n\n[simplify getDefaultRepo\nBen Franksen <ben.franksen@online.de>**20220427091659\n Ignore-this: 389f4c1dfdef3e4c84c04c7af5554666c97290eea1c67bc4c6afb5858a8b5ba1724a094b2f9b3540\n] \n\n[canonicalize result of getCurrentDirectory on Windows\nBen Franksen <ben.franksen@online.de>**20220427084954\n Ignore-this: e64eab8c7e8b34994365acbb8b637f00c4b473f0429c0cd6c2f057c39068c97d7dea746a7dd18d52\n \n This fixes problems detected by the CI. Before this patch we sometimes got\n DOS-style 8.3 directory names, which failed to compare equal to other\n repository paths with modern long names.\n] \n\n[fix problems with tests/issue189-external-merge-move.sh detected by the CI\nBen Franksen <ben.franksen@online.de>**20220424172154\n Ignore-this: 3ede71e278cf3e925f9c3a88c0a81223d9c03e8204bd7f5ebc7fc4ba6ef46b5f1e5104b4d25d4c94\n \n It seems creating a shell script and using that as external merge tool is\n not portable enough to work on Windows (even if we add the missing shebang\n line). So we create a small Haskell program and compile it.\n] \n\n[tests/push.sh: simplify test for push to self\nBen Franksen <ben.franksen@online.de>**20220426092504\n Ignore-this: 10316cd282fe76595074a6aaeee5642714ddb835ec59be7969f36ecacdfab70d41a22f85a4ea42c5\n] \n\n[Darcs.UI.External: inline execAndGetOutput and simplify\nBen Franksen <ben.franksen@online.de>**20220424123938\n Ignore-this: 89f68c829ded85c0d55122bc79e8adbcd60b37533ebe43bc95f6dfb7672879735549052b8205c0ef\n] \n\n[Darcs.UI.External: cleanup execPSPipe vs. execDocPipe\nBen Franksen <ben.franksen@online.de>**20220424122226\n Ignore-this: 195014c295ad60814b7cd254ec06b7740333bd21c80189588352e1f0d6d5859b5a1f599cc572ef78\n \n The Doc variant should be defined in terms of the ByteString variant,\n instead of the other way around.\n] \n\n[resolve issue2691: QC test failure for betweenLinesPS\nBen Franksen <ben.franksen@online.de>**20220424081018\n Ignore-this: ad12c0a5fd72281e5f759a41b08bd9590580c4f2714b9226b95e0963716c3f155183a32db2d3600\n \n This first fixes the test by introducing two newtype wrappers for ByteString\n to tweak probabilities such that betweenLinesPS actually finds the start and\n end lines (in order) in the input in about 6% of cases, which uncovered a\n few more bugs in the implementation of betweenLinesPS. The new\n implementation fixes them and also improves efficiency by strictly avoiding\n ByteString copying and allocations. Getting this right was more difficult\n than I expected, and would have been almost impossible w/o a specification\n to test against.\n] \n\n[improve some haddocks in Darcs.Util.ByteString\nBen Franksen <ben.franksen@online.de>**20220422125939\n Ignore-this: 86e642be85e2f0bc445663d018a4cc5ec12fb8a5abdfbbd07ba1d6ff995cd17ff5fa4013297a4d59\n] \n\n[add property test prop_linesPS_unlinesPS_right_inverse\nBen Franksen <ben.franksen@online.de>**20220424080611\n Ignore-this: 3abdd252a495d8a8903eda1dc8413e8a67ebd694c737661a320f010a2a4d453ef93edee0a7ebbd14\n] \n\n[fix a corner case of spec_betweenLinesPS\nBen Franksen <ben.franksen@online.de>**20220424074906\n Ignore-this: 16d2c5820470b621f593abac3dc5d6219495c6c14245d330d70d91ee1eca26dda6656ce0ca9c27bb\n \n This makes it behave in the same way as betweenLinesPS behaved when the\n start and end line are immediately adjacent.\n] \n\n[add test for (now resolved) issue2072\nBen Franksen <ben.franksen@online.de>**20220412151745\n Ignore-this: f28cb0e14807dc344008deccb084a2208a0c1192ee84f2751580b36e807da730fcc8873a82e4dd2c\n] \n\n[remove RepoPatchV1 speedyCommute\nBen Franksen <ben.franksen@online.de>**20220420185859\n Ignore-this: 5090bcd754fade21b96e01466763063e8c11feaad54450d3e2bc76a2b773b2ed939fd28872c21b0a\n \n Note that this was merely used as an optimization for the case where both\n patches touch a single file or directory, neither of which is a prefix of\n the other. It was previously limited to just files, using is_filepatch.\n Extending the optimization to include directories and relying on\n listTouchedFiles was regarded as too risky, which is why here we remove the\n optimization altogether.\n] \n\n[remove out-commented functions from D.P.Prim.V1.Coalesce\nBen Franksen <ben.franksen@online.de>**20190805080721\n Ignore-this: ea0fde294814422913bbd3d0f19668201ed8cea3322dd9a44527ebb3d1e2e0db071f182158444051\n \n This is recorded as a separate patch for easier review.\n] \n\n[separate canonizing from coalescing\nBen Franksen <ben.franksen@online.de>**20211117083628\n Ignore-this: 7ad0c99b727e6e7cf5179b8a280f4732d4c3cfca1d6783b1bb04dfd7d11e7100747e593d8b5b4e56\n \n This moves the implementation of 'canonize' and 'canonizeFL' to a separate\n module, eliminates the export of canonize, and renames class PrimCanonize to\n PrimCoalesce.\n \n The rationale for this refactor is that 'canonize' for single prims was the\n only remaining method from class PrimCanonize that actually had anything to\n do with canonizing. Its implementation does not depend on coalescing and is\n almost independent from PrimV1, with the exception that it removed patches\n with no effect, using isIdentity. This is, however, also done by\n sortCoalesceFL. Investigating the call sites of the canonize method revealed\n that some of them actually re-implement canonizeFL. The remaining two call\n sites (in Prim.Patch.Split and Darcs.Repository.Diff) now call canonizeFL\n with a singleton FL.\n] \n\n[extend docs for class PrimSift\nBen Franksen <ben.franksen@online.de>**20211117083628\n Ignore-this: 23afc7c34d0989dfcb1c1febe7eb973fd320b6f8198b53439663f167a5551eb86c07ee87651a4da0\n] \n\n[refactor and extend tryToShrink and sortCoalesceFL\nBen Franksen <ben.franksen@online.de>**20190802233801\n Ignore-this: 874da48ff3385f15a01d7ad1c5f9ca742eb0fb94950ef4a7e1ad4be3c2cf53f5ad1ab067a38de0a6\n \n This is a complicated patch that slightly changes the semantics of both\n functions. If one looks very carefully at the previous implementation of\n tryToShrink, it becomes clear that it is very similar to sortCoalesceFL. The\n difference is that tryToShrink doesn't bother to preserve the order\n established by its call to sortCoalesceFL. Whereas sortCoalesceFL takes care\n not to destroy the order it has already established. Both functions\n internally track whether shrinking has made progress, but hide that from the\n API.\n \n The new methods now both share the same core: sortCoalesceFL2. Similar to\n the old tryHarderToShrink, this function now tries harder to shrink the\n sequence than sortCoalesceFL2 did before. However, if this destroys the\n order, it takes care that it gets restored. It is thus able to find as many\n opportunities to shrink the sequence, while still maintaining the ordering.\n \n Internally, keeping track of whether shrinking has made progress is now\n structured as an effect of type (Any,), where Any is the Bool wrapper from\n the base library. This is a Monad due to the Monoid a => Monad (a,) instance\n defined in base, see the doc comments for details. mapPrimFL now takes and\n returns a function with a monadic effect, which allows us to map\n sortCoalesceFL2 directly. Which in turn allows us to change the return type\n of tryToShrink to Maybe, exposing to calling code whether we could shrink\n the sequence. This is used to avoid lengthFL calls when sifting.\n \n This patch comments out some code instead of deleting it. This was done in\n order to produce better diffs. They will be removed in a separate patch.\n] \n\n[define canonize outside of instance PrimCanonize\nBen Franksen <ben.franksen@online.de>**20190805084756\n Ignore-this: 4d21fbe18e2ce16159961299c0818be46b1f1f9f188bd6301a98c16858821c3646080347748314a7\n] \n\n[move canonizeFL out of class PrimCanonize\nBen Franksen <ben.franksen@online.de>**20190805082330\n Ignore-this: 684c754d3d6d582719874c0998018a81db90fd7866f9911e045053c484bd7c98bca9538fd6da06e7\n \n The definition of this function is independent of Prim.V1, it only uses\n methods from PrimCanonize.\n] \n\n[layout fixes in Darcs.Patch.Prim.V1.Core\nBen Franksen <ben.franksen@online.de>**20210216202120\n Ignore-this: ade4c8f46e4a2e3b02cae9b9966410f44281aba16786f85618b865717f9c88ef47a81bdf5aa37a7b\n] \n\n[remove evalargs in Darcs.Patch.Prim.V1.Core\nBen Franksen <ben.franksen@online.de>**20210216194755\n Ignore-this: 1627c10c6f98d2492c9409baf7bffd9f48ae0ea82c80ed3fc070985101e1091f841810388466c374\n \n All the interesting fields are already declared as strict in the data type.\n] \n\n[derive the Show instances for Prim.V1\nBen Franksen <ben.franksen@online.de>**20210216193751\n Ignore-this: e40605c60063e160d357c8b92682169db18f68ebd5bf193eef35071529f2801968db415c63b08248\n] \n\n[drastically simplify implementation of siftForPending for Prim.V1\nBen Franksen <ben.franksen@online.de>**20190801171930\n Ignore-this: 2363ff65cb958bb14154c2f3230cbe8cb274c22f227067d9b6f8628fb9cc0d613256798fe69e4f3e\n \n All the low-level optimisations have been eliminated. What remains is quite\n simple and easy to understand. Theoretically this change may cause\n performance regressions; but the optimizations only covered some simple\n cases like \"pending consists only of hunks, binaries, and setpref\" or\n \"pending consists only of addfile and adddir patches\". These special cases\n are handled just fine and without much overhead by the standard algorithm.\n Besides, the bottleneck in handling the pending patch is not sifting, but\n the complicated algorithm for eliminating recorded changes from pending.\n] \n\n[move instance PrimSift for Prim.V1 to its own module\nBen Franksen <ben.franksen@online.de>**20190801154508\n Ignore-this: 9ffeb5a9f23f3bb9e14a9b8734060ddd2e03f3387ef569c3f0b2e79f7e0e719431d3ec366a610ba7\n] \n\n[eliminate class PrimClassify\nBen Franksen <ben.franksen@online.de>**20190801154508\n Ignore-this: f7f39a64c32bb32a9dc249508a619470080d8e133d59563bfa6685e69f01e59ddbedd8ed61c09e34\n \n There were only three use cases left:\n \n (1) The whatsnew command used primIsHunk, which can be easily replaced with\n     isJust . isHunk.\n (2) The implementation of RepoPatchV1 used is_filepatch for speedyCommute.\n     This is now replaced with calls to listTouchedFiles. To account for\n     directory changes, we now check that neither file path is a prefix of\n     the other.\n (3) In the instance PrimSift for Prim.V1. Since this is specific to Prim.V1,\n     we implement the necessary functions directly.\n] \n\n[fix haddocks for pushCoalescePatch\nBen Franksen <ben.franksen@online.de>**20210207152619\n Ignore-this: df46b4e90c7da050e708aebca8bd4b737a0332f579092adcdf33cd69c5bb00b51f4643d18e4f0062\n \n Itemized lists require the points to be numeric.\n] \n\n[cleanup and simplify Darcs.Patch.Prim.V1.Coalesce.mapPrimFL\nBen Franksen <ben.franksen@online.de>**20190802203643\n Ignore-this: 6fe467bf631245fafe049c9d96e04f833508ba377688a71ac467f9d3ea41241fab404f4e77bd7c1a\n \n This eliminates the data type Simple. It is easier and more efficient (wrt\n memory as well as cpu) to put the original patches into the Map, rather than\n take them apart and afterwards put them together again.\n] \n\n[use (Bool,a) instead of Either a a in pushCoalescePatch\nBen Franksen <ben.franksen@online.de>**20190802233623\n Ignore-this: 538ae2f1bff7a53eaa89d43975177ccd356402f03ce125322ff740881bd8d17df11f70632e4899b8\n \n This is less verbose and more directly captures our intent.\n] \n\n[normalize code layout for pushCoalescePatch\nBen Franksen <ben.franksen@online.de>**20210207150213\n Ignore-this: 7c460795d70f7815ea0af5d3d73d510a111a7f33789c4f9caa9db7fd159693f1960223ec2be83c2\n] \n\n[resolve issue1981\nBen Franksen <ben.franksen@online.de>**20220412164924\n Ignore-this: 3ce6b926b313a3d30045c5e47d3282e17c66354611861ea37a29a218e6736b5fd963a7b4e0826a78\n] \n\n[accept issue1981: suggest repair when pristine files are missing\nBen Franksen <ben.franksen@online.de>**20220412162926\n Ignore-this: 21e494a15d85ff2a26e6c4533fdcee092043c597b606b314e68e8809b8dec28b3b377188913b4f29\n] \n\n[resolve issue1819: external-merge and no-allow-conflicts\nBen Franksen <ben.franksen@online.de>**20220412143240\n Ignore-this: b8c0e5e6756e5e2368477fc1da2b8eba6de24f7e39aa25b7ecd63771902bd7d0f80a4ac1071452f4\n \n The fix is simply to remove the code that deliberately tests for the\n external-merge option before failing in announceConflicts.\n] \n\n[resolve issue2646\nBen Franksen <ben.franksen@online.de>**20220412135010\n Ignore-this: 8d9f8f9029ecd6d15f884aadb006a78e1f1cc70b40d9a407a16eb9de1c123d3d813c81f1f141f36a\n] \n\n[patch index: disentangle Darcs.Patch.Index.* modules, rename PatchMod to FileMod\nBen Franksen <ben.franksen@online.de>**20211004080939\n Ignore-this: ac59088cf63cb273f80986055b3efe7ea89545bcef4e011dc6aee72cb038b9621264dab537edc48b\n] \n\n[patch index: cleanup doc comments\nBen Franksen <ben.franksen@online.de>**20210610120909\n Ignore-this: 8338b392d1a22f71122e0c2f6bd7fcfc4524fed5ed473967aaf586ebab535b0ccc0c77783007778a\n] \n\n[patch index: optimize Set Word32 -> IntSet\nBen Franksen <ben.franksen@online.de>**20210610121541\n Ignore-this: 3f64ba8278cc2a83401775d65ffb0220990977242083054901d791021b0e2d98eafd3a664c2ed61\n \n This trades a bit of memory (at least on 64 bit archs) for the ability to\n use an optimized data structure. The version number gets increased to 5.\n] \n\n[patch index: massive performance improvement\nBen Franksen <ben.franksen@online.de>**20181004160731\n Ignore-this: d02cd79fc9d674d6432479c574f9d971a6b7fa3c5c46049cff63db8b6117ae09c3ce21d32409e9a6\n \n By definition, a directory is regarded as touched whenever a file or\n directory beneath it is. This information was laboriously re-constructed at\n query time (in maybeFilterPatches), which could be very slow when a\n directory had many children. It is much more efficient to add this\n information immediately when we build or update the patch index. This\n requires no change to the data structures, just additional inserts.\n Nonetheless, this is a format change, so we have to increase the version\n number to 4.\n] \n\n[patch index: reformat a doc comment\nBen Franksen <ben.franksen@online.de>**20210610120501\n Ignore-this: 665a824caca2b970d25fabf22eb85d688bec52632d00d77ee9ebeb292d32d473856329b9aebb4d9c\n] \n\n[patch index: import from Darcs.Patch.Index.Types explicitly\nBen Franksen <ben.franksen@online.de>**20210610120619\n Ignore-this: 55342c521619ad0b3d0a206affc765a6b6214b62f22166e71057b4349e4d482a5663e5081f55bfa4\n] \n\n[patch index: debug messages when loading\nBen Franksen <ben.franksen@online.de>**20210610120949\n Ignore-this: 66b640cde02f352c7905afe48b4cfa6067b041f3ebc1af5e6389ea565e428b05ddbb607a9d0cb0f4\n] \n\n[patch index: remove another kludge for broken move patches\nBen Franksen <ben.franksen@online.de>**20210610190038\n Ignore-this: d5fa46e3cfd90d65313facc204d8cbdada8048b223468f79272f9c3830474807c224364ab25677ac\n] \n\n[replace undefined with error calls for missing methods\nBen Franksen <ben.franksen@online.de>**20211203054657\n Ignore-this: 20661aa6ba3a359da46ba2734d7596991ca3bd471f7b8634b64030bf8ef5870552f7fdb7d4d6dfac\n] \n\n[require MonadThrow from the base apply monads\nBen Franksen <ben.franksen@online.de>**20210919120041\n Ignore-this: 8b6138c45749e96828be7a9e9b71458228b0c71475e98dce0762648d7aa56f122d34a82f64ab1a82\n \n This avoids having to throw from pure code when applying patches in a monad\n that is not based on IO. In Prim.FileUUID we now correctly handle all patch\n application errors as exceptions. In D.P.ApplyMonad, the FilePathMonad is\n now a StateT over a Pure monad with an instance MonadThrow that calls error;\n in the harness, the Fail monad is now a synonym for Either SomeException.\n] \n\n[catch all takeLock exceptions in withLockCanFail\nBen Franksen <ben.franksen@online.de>**20211108160839\n Ignore-this: c574accb8be23d198e0bbee14e1cccb2b146c8100aa4ee9bb6a99ebfe557106e2e9fee921fb2d4dd\n \n Note that withLockCanFail is used in commands that are otherwise read-only,\n such as annotate and log (with a filename), in order to create a patch\n index. These commands should not fail if taking the lock fails for whatever\n reason (e.g. no write permission). This is important for instance when using\n darcsweb.\n] \n\n[tag command: prompt for the tag name if argument list is empty\nBen Franksen <ben.franksen@online.de>**20210627080534\n Ignore-this: 3c70f157ed9f3b3e0301c68769557cd5ed1cc59d7324dc7baf70006c0dfbdb6ac8d6365045612bf\n] \n\n[tag command: clean up imports\nBen Franksen <ben.franksen@online.de>**20210627075730\n Ignore-this: 2b6a9706d3531d900959c54cbef7cb4b2e7ba1e33ba2c676224e181bd74c8507fbd9bf7c4f710ef\n] \n\n[Darcs.UI.PatchHeader.getLog: take summary of changes as argument\nBen Franksen <ben.franksen@online.de>**20210627075202\n Ignore-this: 38265b7ed5ece5316161c40cca0ae7db6a1eb1e59a3a49d133dc0f49515cf65b83abc583ad676d52\n \n Instead of passing the changes, we now pass their summary. This avoids\n verbose and ugly type annotations to avoid ambiguities when passing NilFL in\n the tag command.\n] \n\n[tag command: in get_name_log, use 'args' from the outer scope\nBen Franksen <ben.franksen@online.de>**20210627073934\n Ignore-this: e74a2a28bf027070de64a2a8be45aeac93b289b82b99cd4dfa312ca630656adfdf34e621fb1a239b\n] \n\n[tag command: reformat the where clause of tagCmd\nBen Franksen <ben.franksen@online.de>**20210627073809\n Ignore-this: 673a97d985ca66ee53f7f5bbcd34ab5e53ef12631273619f094e69635c3f4a1b99f11c9dc89b7dd8\n] \n\n[tag command: refactor hasPipe\nBen Franksen <ben.franksen@online.de>**20210627072002\n Ignore-this: d3861107d475474372ee623ced02f64598def725eea85cd060c16846cc163fe73b70db12e4d0a75e\n] \n\n[tag command: improve help text\nBen Franksen <ben.franksen@online.de>**20210627071800\n Ignore-this: a56cdcdbed1e238754f57db719d71019ccd58e64b6b258d4cd6b0346897577339a2fbd5fd75e7376\n] \n\n[auto-format help text for tag command\nBen Franksen <ben.franksen@online.de>**20210627062550\n Ignore-this: 59f715042939c55d5b80ab6513aa1567c278789339bf62a0d1475df678cb68e635b2a746c865e644\n] \n\n[remove type ConnectionError, remove Darcs.Util.Download\nBen Franksen <ben.franksen@online.de>**20210623082607\n Ignore-this: ee6db6842ba76617d506bec3f0373d42dc33964480785d7611e55fb646de98f3cd581fd4314b098f\n \n The data type was only used in checkCacheReachability and in a way that no\n longer worked anyway. The remaining item in Darcs.Util.Download was the\n Cachable data type wich is now defined in Darcs.Util.HTTP.\n] \n\n[import ConnectionError unqualified\nBen Franksen <ben.franksen@online.de>**20210622163331\n Ignore-this: 4d7463e525b1c023aad7eb492db2a6f4adda992351978975b2532a1ed58482cfea372192711955a3\n] \n\n[remove support for downloading via curl\nBen Franksen <ben.franksen@online.de>**20210622161934\n Ignore-this: 61e4875b4d8e424c9227cb4706f7ad0ab4ba9e5f77e2fd5317a4729dee315ec64d6111d5c2781fff\n \n This includes the cabal flags 'curl' and pkgconfig'. It also removes the\n --debug-http and --no-http-pipelining options, and replaces the combined\n network option with remoteDarcs. The module Darcs.Util.Download.Request is\n also removed, the only items that are still used are two data type\n definitions which are now defined directly in Darcs.Util.Download.\n] \n\n[remove the unsafe tentativelyAddToPending, replace with addToPending\nBen Franksen <ben.franksen@online.de>**20210302150625\n Ignore-this: cce3b2d0ecab7060153fa6a357efa83f22c2b0f1e60d57b631ccef7f1b9a6660a30d3b48f353dd7d\n \n The fact that this type checks witnesses the fact that indeed using\n tentativelyAddToPending was wrong: the patches we pass all start at the\n unrecorded state and thus should be commuted past the difference between\n pending and working before appending them to pending. This is what\n addToPending does which is why it is the safer choice here.\n] \n\n[rename addPendingDiffToPending to unsafeAddToPending\nBen Franksen <ben.franksen@online.de>**20210302132611\n Ignore-this: c64370f6ea0a98e2db90a644b6ac511751f998fdb4182c42de9f18ff1c2c8f3dd8a9849800da8236\n] \n\n[ci: run tests concurrently (6 jobs)\nBen Franksen <ben.franksen@online.de>**20211105202439\n Ignore-this: 5f69156e53f5b52b7137077883d72d70652d4a973cbd5c5718be4dff9b742f825a4f77a8e4748508\n \n I have observed that this makes the tests run faster, especially on macOS.\n] \n\n[ci: allow empty commits\nBen Franksen <ben.franksen@online.de>**20211105202358\n Ignore-this: 7e737cf04f5a08d659156e476a09e8623d4cd83c0ef0593a8aef3ad401655f1d170b2c1e8cb29a\n] \n\n[generalize readPatchesHashed and use in readTentativePatches\nBen Franksen <ben.franksen@online.de>**20210327055207\n Ignore-this: 5c1771aacdbc2ee22e02e37e46b5b72621c02fa5bfa5b703ea803da6a7854c13c3529170d1fbc57b\n] \n\n[replace readTentativePatches with readPatches\nBen Franksen <ben.franksen@online.de>**20210301201958\n Ignore-this: 98d4665d77887ce616540cc11ade28616e4c1458303a8341e01a479bebde69c383dfb905bc6b0bd\n] \n\n[import tentativelyRemoveFromPW via Darcs.Repository\nBen Franksen <ben.franksen@online.de>**20210301152620\n Ignore-this: bb37ef9fe31d2be6d830cf23faff248870b333e4040f91b84fa6b0c0f966d90526f22f12dea71788\n] \n\n[ci: fetch before commit\nBen Franksen <ben.franksen@online.de>**20211105143643\n Ignore-this: 1127b44c6b77869cc0ca6b8ffeda50c737fa6e62e4d62194be758e90a4524f038f29a2492ec7d4f3\n \n This works better with the recent change that makes us share a single\n branch: rather than force-pushing our local branch, we now first fetch and\n then set our HEAD to master. To completely re-initialize the git repo, pass\n the argument \"init\" to the script.\n] \n\n[ci: use only the default (latest) version of each OS\nBen Franksen <ben.franksen@online.de>**20211105141833\n Ignore-this: 77f372e4b03493b65ee149a5ed1dd301afad1f3a47f70033b19e38fbfc6d404f86afc94c0407779c\n \n This makes the CI runs faster because we don't have to wait for runners to\n become available.\n] \n\n[use withRepoDir in createPacks\nBen Franksen <ben.franksen@online.de>**20210315162432\n Ignore-this: b7141bfd23d7c787f27eb919010c08aec95162bffbfe4775fdff3a1e5868c5a85a46e331290f86d9\n \n This simplifies its use in darcsden.\n] \n\n[fetchAndUnpackPatches: fetch inventories, too, pass valid hashes, not String\nBen Franksen <ben.franksen@online.de>**20210717084010\n Ignore-this: bb7311cbce7399d3e5903d68601431d3b7fa6096b0f92e1a2a0af4ed24674f5f707facac9395bdfd\n \n When we unpack patches and inventories from the pack, we previously fetched\n the necessary patches in parallel, for guaranteed completeness. We now do\n the same for inventories, so that when the remote repo has been tagged after\n the last time packs were updated, we still get the repo in its most\n efficient form. This requires passing the inventory hashes as well as the\n patch hashes. To improve type safety and efficiency we now pass lists of\n InventoryHash and PatchHash instead of String, which avoids encoding and\n then decoding and the extra failure mode due to these conversions.\n] \n\n[convert import/darcs-2: recognize the compress and diffAlgorithm options\nBen Franksen <ben.franksen@online.de>**20210303145001\n Ignore-this: 85558b53cb6d96f71f8f685002d80e3a8f41fa88b023194b59df8fa17f2436eab6aeb1f95ea6ebc3\n \n This avoids hard-coding some arbitrarily chosen value.\n] \n\n[convert darcs-2: remove intermediate commits\nBen Franksen <ben.franksen@online.de>**20210617101048\n Ignore-this: fc35c5ca37a0014148a274c6e953b147759f898249e72249ee0aca4118e1f0f341e06f45ce258a33\n \n There are two reasons for this change. One is that intermediate commits open\n a brief window in which the repo is not locked. Since this happens in a\n newly created repo, this is not of much practical concern and more a matter\n of principle. Second, intermediate commits serve no purpose. If conversion\n runs into an exception you will end up with a partially converted repo (the\n state of the last commit). This is quite useless, since there is no way to\n restart the conversion at this point.\n] \n\n[convert darcs-2: honor the compress option\nBen Franksen <ben.franksen@online.de>**20210303143641\n Ignore-this: 4178cc4194d62d3fa7593c1eef428eed7ce98933308d1614584e683cc3b3030021553fb0acb605bf\n] \n\n[convert darcs-2: add a final call to finalizeRepositoryChanges\nBen Franksen <ben.franksen@online.de>**20210303142815\n Ignore-this: 17c6f2ca4af83cde9b7f0cf3a3d7963133eb8a87ae9229cd95131b9ad50dedc7661d1b883db9d5\n \n This is more a matter of principle than necessity, since the code does work\n without the call.\n] \n\n[ci: more descriptive name for the git commit\nBen Franksen <ben.franksen@online.de>**20211105091710\n Ignore-this: 14c677925a8645ff4207252355426fcbb05de7673a816b463898af25a671e02843c97ba4eeec91c\n] \n\n[ci: remove branching from release/trigger-ci\nBen Franksen <ben.franksen@online.de>**20211105084919\n Ignore-this: 444f6f6b7ee6f29d18f2ea47249d9a95c16185fb74c3b5978f17441042b2ce7dc1320c5c62109618\n \n I found out that this interferes with caching: when you trigger CI on a\n different branch, the caches from a previous run in different directory\n aren't used. We now do everything on a single branch named 'master' to allow\n sharing of caches.\n] \n\n[fix in Darcs.Patch.PatchInfoAnd.fmapH: must invalidate hash\nBen Franksen <ben.franksen@online.de>**20210718141537\n Ignore-this: 8a9610a2e0f504501f94adf929e4bf9850364340da08a38dbe19588ef5c874d0824f30b268b2a28a\n \n The function we map over the contained patch may modify it, so any hash\n we may have had is now invalid.\n] \n\n[cache: eliminate hashedFilePathReadOnly\nBen Franksen <ben.franksen@online.de>**20210530083542\n Ignore-this: 6b7b737d8242d0fce556e0ca1fdefa51ab3f7a156088bd7dbc4e9e642c0df129ac94eb6f401f933a\n \n Since we pass the CacheLoc, we can make the distinction between bucketed\n (writable) and non-bucketed (not writable) cache inside hashedFilePath.\n] \n\n[refactor updateHashes in TreeMonad\nBen Franksen <ben.franksen@online.de>**20210421083122\n Ignore-this: a4dd8fda4fb083a73f1d55f029dcdc3e363b0762a7aa9832ec568dbe07fabf3e7f789bfea5073c49\n \n The central change here is in the type of updateHash from\n \n   TreeItem m -> m (Maybe Hash)\n \n to\n \n   Maybe (TreeItem m -> m Hash).\n \n Indeed, for a concrete instantiation we either have a total hash function or\n else no hash function at all. In the latter case this change avoids calling\n a procedure that always returns Nothing, potentially recursively over a\n large tree. It also gives us more precise typing.\n \n Everything else follows from that, with the exception of 'flushItem' which\n was rewritten to make it clearer what happens: we first update the hash,\n then update the item on disk and then replace the item in the tree we are\n tracking.\n] \n\n[move reading and writing of inventories from D.R.Hashed to D.R.Inventory\nBen Franksen <ben.franksen@online.de>**20210327061805\n Ignore-this: 300dc2023972e7d9d709d21de95153a63e0cdb279d6debacd1c54c1017eb22d6a9b00d87073e0d96\n \n This is a pure code move, except that I also cleaned up the layout of the\n import lists in D.R.Hashed.\n] \n\n[fix a FIXME: HashedDir mismatch in the handling of packs\nBen Franksen <ben.franksen@online.de>**20210716150629\n Ignore-this: b63b49a3deda117bca42618fded8b7db7833d065cf5503010a068f139501284045bb95b12b21c209\n \n It turned out that the HashedDir parameter wasn't used anywhere, so this\n patch removes it. This makes sense since filepaths in the pack files already\n contain the subdirectory of all files.\n] \n\n[major refactor: internally store valid hashes in parsed form\nBen Franksen <ben.franksen@online.de>**20210416112403\n Ignore-this: 6b4382f578cac191e53a094f1649dad6ca6e42aa041ec58493e3b8931aaa8d076c2077a689317a3b\n \n The main theme here is the \"parse, don't validate\" mantra. Storing hashes\n (optionally including the content size) in parsed form is memory efficient\n and gives us much better typing. The code for this has been moved into its\n own module Darcs.Util.ValidHash with a safe API. PatchInfoAnd now stores its\n hash as a PatchHash and the Tagged sections of a PatchSet store their hash\n as an InventoryHash. The HashedDir is now inferred from the type of the\n hash, which means we no longer have to pass it to the function exported by\n Darcs.Util.Cache, which simplifies the API and makes it more type safe (yet\n note that not a single 'forall' had to be added to type signatures).\n \n This refactor exposed a strange HashedDir mismatch in the handling of packs\n that I temporarily marked as FIXME. I suspect that some files are not placed\n in the right directories, resulting in a loss of efficiency when cloning\n packed repos. This needs further investigation.\n] \n\n[move D.R.Inventory to D.R.Inventory.Format\nBen Franksen <ben.franksen@online.de>**20210327054814\n Ignore-this: 32dd92b2be5f2ab200d7f349372086cb6ac4e2def2b09ac8b1e3f3a1c80cab63801b3b00ead079c1\n \n This is so that we can move the code conerned with reading and writing\n inventories to D.R.Inventory w/o mixing the inventory format with its\n interpretation.\n] \n\n[cache: inline copyFilesUsingCache\nBen Franksen <ben.franksen@online.de>**20210307101327\n Ignore-this: 1039cb3158ce64caec81b74958e68546a7c5c1f6ff62a7cc5b1adfe3ade34b49bbc3bcf03d100b5d\n] \n\n[cleanup parsing and unparsing of hashed directories\nBen Franksen <ben.franksen@online.de>**20210417101623\n Ignore-this: c1a6450fba98053feee3e470f78a99dcb98f7ed42b4ce4029e5d133f9081b27ac7932f7acfbbba35\n \n The parser now uses Darcs.Util.Parser. The function decodeWhiteName which is\n used by the parser is now explicit about decoding errors. In contrast, the\n unparsing is actually *not* supposed to fail: it has existing hashes for the\n subitems as a precondition; indeed we call hash update functions in various\n places before calling darcsFormatDir. As it stands this is quite brittle and\n should be improved but this has to wait for another patch.\n] \n\n[fix generator for hashes in D.T.R.Inventory\nBen Franksen <ben.franksen@online.de>**20210324023216\n Ignore-this: 942b9deff9c67365da5f57e55670502bd5892dd64771edc5e69cca26e5ab426c8f5d215c3d5b9682\n] \n\n[use decoding to validate hashes\nBen Franksen <ben.franksen@online.de>**20210416095352\n Ignore-this: d6c7a2a1a7d27ab95187de10d35f9c597f09fe71745ac967ec37436a770aa5d2a6aa16133ee5fde8\n \n This also delegates the implementation of okayHash to okayHashB.\n] \n\n[make possible non-existence of hashes explicit\nBen Franksen <ben.franksen@online.de>**20210412055417\n Ignore-this: 842dc617ace1f53ed410d5f04615523513181b3937607f1a99057dba6d25d2516e962772f7057653\n \n This removes the NoHash constructor and (more or less mechanically) replaces\n Hash with Maybe Hash. This exposes lots of situations where we missed out on\n more precise typing i.e. where we know we have a hash but still work with a\n Maybe Hash. This patch doesn't clean these up, it just allows and encourages\n us to do so.\n] \n\n[move hash validation from D.R.Inventory to D.Util.Cache\nBen Franksen <ben.franksen@online.de>**20210327075324\n Ignore-this: d020f2ac5800819b5eba063a53901aa2f64ccb1222354bad6ed556d89a67945d273e225fb3c39ad9\n] \n\n[validate hashes in inventories on the ByteString side\nBen Franksen <ben.franksen@online.de>**20210314083456\n Ignore-this: 87fc6ffe037ab46a792e4466db85b028f92e593edb2219529dbd6f7c814e9c1610e7a8e76e4ab835\n \n For reasons I haven't been able to figure out this drastically reduces\n memory consumption.\n] \n\n[avoid re-validation of already validated patch hashes\nBen Franksen <ben.franksen@online.de>**20210308093608\n Ignore-this: 9c03b65a47f366271b0beee735a3e8d6b5e72fe0031d405d4d701caee84c89fc646e8d3408493b18\n] \n\n[cache: refactor cacheHash and remove export\nBen Franksen <ben.franksen@online.de>**20210307101410\n Ignore-this: bb33fb17c07c2e8300ceb4731969faf823dc175a37e6fc2881ff4a00160a0a97b7b26a4e7ba79e05\n] \n\n[use ShortByteString for Hash content\nBen Franksen <ben.franksen@online.de>**20210307162525\n Ignore-this: 343006f7acead5b3f3d044b3454fc7e6370d7d9ec177b13f45bf9c365c88b0e4a8e414a128c1cb37\n \n This should bring down memory use and decrease fragmentation.\n] \n\n[ci: fix primary key for caching dist-newstyle\nBen Franksen <ben.franksen@online.de>**20211104105043\n Ignore-this: 1e79356ff7ddbb9bb30843652341020ff486aae44f4469cb1fd0dbd496ec28eb850e1fcf1c7dbe7a\n \n Cabal will re-compile everything if the build plan has changed so we also\n need add this file to the hash.\n] \n\n[remove the useless optimize pristine subcommand\nBen Franksen <ben.franksen@online.de>**20210510113544\n Ignore-this: 1c75fd4ccfbe80df50059810df5d91dcf60cc4fd7c5b6715a01ec5761df701a451a636763f654133\n \n Upgrading the pristine from the size-prefixed format is done automatically.\n] \n\n[fix the order of parameters to Tagged\nBen Franksen <ben.franksen@online.de>**20210327050259\n Ignore-this: c8c6812ba8b25fa932a134d5a4839b300ab98442484799fbab71704be4fcf6716391e8fe44a2c322\n \n The order is now 'Tagged patches tag hash', i.e. patches come before the tag\n that covers them. I should have done this years ago when I established the\n convention that patches always appear in left to right application order.\n] \n\n[return hash from writePristine\nBen Franksen <ben.franksen@online.de>**20210324172607\n Ignore-this: 92cfee04b27714e70f51b42bb3c107c231f17ba497071e89dd04b6054911259a782a66260c03c562\n] \n\n[simplify writeInventory and writeTentativeInventory\nBen Franksen <ben.franksen@online.de>**20210324053723\n Ignore-this: cc354cfc9ccdfe121d8356195aad6f4a7b00bbbb08286282a03376b12b6bd7039f09af604b908f14\n \n The simplification consists of no longer treating empty inventories\n specially. It involves is a minor change in behavior in that an empty\n inventory is now written to disk as a hashed file; which is the reason we\n have to adapt tests/issue1987.sh. Indeed, my original motivation for the\n refactor was so to make writeInventory return a hash unconditionally.\n] \n\n[lift writeInventoryPrivate to the top level and rename to writeInventory\nBen Franksen <ben.franksen@online.de>**20201103063416\n Ignore-this: ec7d61553da2ce9972616ec2ef2d3e63f4158d3b054f34ad41ea26ec3ef9d5a0d66b08e9e1f153a5\n] \n\n[ci: add macOS-11 and windows-2022 to matrix\nBen Franksen <ben.franksen@online.de>**20211103163757\n Ignore-this: d336271ef6a2692df63214648ae59ae4bc96f4065c62161767db9bbf96e8dec0ae62259ef7ba91fe\n] \n\n[ci: install lighttpd before running tests on linux\nBen Franksen <ben.franksen@online.de>**20211103163505\n Ignore-this: aa8ef8ff04bac161a2f23a2610e02ccd4f81bcc3ec66ebc3d25b6a8062d101f2340f21a09f3d3d38\n \n Otherwise most of the network tests are skipped.\n] \n\n[ci: add ghc-9.0 to the matrix\nBen Franksen <ben.franksen@online.de>**20211102115521\n Ignore-this: 59fe796c2aef30e6e5ad81364eca47d4e53ec6f9c27e34285a8c1ab0bce6784aa24b7b38f5d1027c\n] \n\n[ci: always use the \"latest\" version of cabal\nBen Franksen <ben.franksen@online.de>**20211103113421\n Ignore-this: de44ad0f54458cfd19542eed22d590b2bcc1b544099524942e61deb66534e2db627d2123c46c4863\n \n Including several cabal versions in the build matrix is problematic for\n caching and blows up resource usage unreasonably. Besides, cabal-3.2 cannot\n be used with ghc > 8.10, which would then require more exceptions.\n] \n\n[ci: actions/setup-haskell -> haskell/actions/setup\nBen Franksen <ben.franksen@online.de>**20211102112845\n Ignore-this: 10bba56fd4f20a8b9ca2e0c89bd90ed8517bcff7c86eb0d3d3d36492461adddae917281feffc9ede\n \n The former is no longer maintained. Also let haskell/actions/setup choose\n the precise versions and specify only the first two version components. This\n is more robust and allows us to remove the macOS-10.15/ghc-8.10.4 exception.\n] \n\n[fix for tests/network/external.sh failure on ubuntu with ghc-8.10\nBen Franksen <ben.franksen@online.de>**20211102161252\n Ignore-this: 631c34c194838119d7eb847403e6d5033739ac1f1833350f5d063953fe982a7973444dcce3c5e70\n \n This also slightly re-organizes the script to make it easier to understand\n what's going on.\n] \n\n[ci: redesign caching of cabal store and dist-newstyle\nBen Franksen <ben.franksen@online.de>**20211103113842\n Ignore-this: e96d0c04ade05e53ef511786f33892e8186bcef0cc96c0e5ed95b1c522ba9006c93ebf77044586f3\n] \n\n[tests/broken_move.sh: adapt to better apply error messages\nBen Franksen <ben.franksen@online.de>**20210317074545\n Ignore-this: 999e8c6a0f46b5b2084dca38822af25cf68c9e324f3a5a3e5329397d774d95993cac3c3b9667eb6a\n] \n\n[TreeMonad: add two comments and some code re-formatting\nBen Franksen <ben.franksen@online.de>**20210620072923\n Ignore-this: 18cf64425f9a03312e6c14b831b68fef1f249bd4ab6ec408a6a3661919283917c985f2f9eb832988\n] \n\n[TreeMonad: more fine grained error checks\nBen Franksen <ben.franksen@online.de>**20210323144929\n Ignore-this: d49beba317aca1d06c5e94226644e7d5d277cae2915db05eb500782aa589cdb014f79f74f08cfa71\n \n In particular, 'readFile' and 'writeFile' now distinguish between\n non-existence and inappropriate type (directory), and 'copy' throws an\n exception when the source item does not exist instead of doing nothing.\n Since System.IO.Error does not export a function to construct an\n InappropriateType IOError, we no longer use the constructor functions, but\n instead import the IOErrorType from GHC.IO.Exception.\n] \n\n[TreeMonad: explicit import of D.U.Path, some simplifications\nBen Franksen <ben.franksen@online.de>**20210316072251\n Ignore-this: bd080c44431b62746a21a1f508eb3a1b03f41993494e26290d09b16eb92f2f9af9849eb781ca92e6\n] \n\n[TreeMonad: factor out findItem\nBen Franksen <ben.franksen@online.de>**20210620070138\n Ignore-this: 956660de8d73e6595a8d895a3b3810a49d4e21e41f8b20701f1dbd7c7925d2126090cfc0344509b6\n \n This will later allow us to throw more precise exceptions.\n] \n\n[better error handling when applying patches\nBen Franksen <ben.franksen@online.de>**20210314220059\n Ignore-this: 7435723695779f02418fae12f5326c3b029a23ba9dd1aa67cbce525f41c74dca35f7cea67476426d\n \n In the TreeMonad we now throw the IO errors that fit the situation instead\n of userError. This allows us to give getter warning messages when using\n runTolerantly. In addition, if we cannot run tolerantly, i.e. when we apply\n patches to pristine, we now notify the user which patch caused the problem\n and suggest to run 'darcs repair' on the repo that contains the broken\n patch. This is important because we no longer silently ignore broken move\n patches.\n] \n\n[re-write of release/gen-version-info.hs\nBen Franksen <ben.franksen@online.de>**20210710073431\n Ignore-this: 974d34cc9a9940dde3ea8a93b076edfb1e4a16ccd7cc2cd62a52be42e585c3b2204c4a6e3277cde2\n \n This simplifies the logic but also replaces the test for existence of _darcs\n with catching all IOExceptions. This makes it more robust in case executing\n darcs fails for some other reason.\n] \n\n[release/gen-version-info.hs: fix missing check for existence of _darcs\nBen Franksen <ben.franksen@online.de>**20210707115839\n Ignore-this: 9ef1aae66c2e75f6232bedb06ece11aee9f213691f5e3d422e1c6bb38d5957b8aab411b14eaa610b\n] \n\n[HasCallStack: withCurrentDirectory, withRepoDir\nBen Franksen <ben.franksen@online.de>**20210708183714\n Ignore-this: d43f561a9683aefc36d78b7664c5c4bdc09e883f23ae60d53101b18eea330cbb6731889c66a21ca5\n] \n\n[fix in checkSuspendedStatus and maybeDisplaySuspendedStatus\nBen Franksen <ben.franksen@online.de>**20210228104448\n Ignore-this: 6c90b32f275a99e6d66cdd05bac997aaa1dae3a1694db9326e4c1fa979a57798cee6f34e83c308cd\n \n We must not try to access either of the rebase patch files if the repo\n location is a remote URL.\n] \n\n[setCurrentDirectory: call error if argument is a remote URL\nBen Franksen <ben.franksen@online.de>**20210708083314\n Ignore-this: 6435e3d0c3b580f680958acb56b67f0f6e5c71ae536770628c3a8f134476ffad9cc519e5315e01a\n] \n\n[resolve issue2682: conflict not marked if tag pulled at the same time\nBen Franksen <ben.franksen@online.de>**20210705075417\n Ignore-this: 3527f75992b5d674be9d5f3e7347b5bdb2a27d326c8cf53676523be0f7860fd0abd6825dcc08569d\n \n The fix is to consider a conflict as resolved only if all conflicting\n patches are (transitively) explicitly depended on by a single patch.\n] \n\n[avoid use of the instance Named (Conflict p) for rebase unsuspend\nBen Franksen <ben.franksen@online.de>**20210705112751\n Ignore-this: 99246554ea7f171c551fc57cbdfc8d882e8a7cd68460abbf3c44ff96dfdca1f730ea23ac44779b8c\n \n This is so that the fix for issue2682 does not break rebase unsuspend, but\n it also makes sense independently: when unsuspending patches we definitely\n don't want explicit dependencies to count as conflict resolutions.\n] \n\n[add findConflicting to Darcs.Patch.Conflict\nBen Franksen <ben.franksen@online.de>**20210704212926\n Ignore-this: c8d14eed7ca3a261a4c6000b448135e016b2a6f5613d4d16d40b908dee40994a47c1b0ec1064b4c8\n] \n\n[re-add isConflicted method to class Conflict\nBen Franksen <ben.franksen@online.de>**20210704210248\n Ignore-this: e6fda415ff4ed6ea7a079f717f20d7d615edcbbdb3c85076a66c526c4fb1ba075fff8a630c2715b3\n] \n\n[improve test for issue2682\nBen Franksen <ben.franksen@online.de>**20210706160306\n Ignore-this: 68ebd0188216cd1a9005f4967e81791db5d38c92a195b15e89490117093e4698db9f06b3ddddc4f3\n] \n\n[accept issue2682\nBen Franksen <ben.franksen@online.de>**20210705074510\n Ignore-this: 92f39b09069c18d1ff3189cb4140fbe9add83d400b09b1056f41d4ac7b42a63b11fc4c948662d0ec\n] \n\n[decouple IsPrimV1 from ApplyState p ~ Tree, simplify runJob\nBen Franksen <ben.franksen@online.de>**20210323143203\n Ignore-this: 7831d21dc0347f2a8edfcd5d27363f04bf3213d5117acdb23f4778b545ca54ae3847fdcd2acb0509\n \n The extra 'ApplyState p ~ Tree' constraint was only for convenience, the\n same effect is achieved with a separate call to checkTree. The rest of the\n changes is replacing case matches with 'Dict <- return checkXxx' which I\n find leads to more readable code because it avoids extra indentation. And\n since all cases of runJob require the 'ApplyState p ~ Tree' constraint\n anyway, we can now float the checkTree out of the large case expression.\n] \n\n[get rid of \"nasty hack\" in applyPatchesForRebaseCmd\nBen Franksen <ben.franksen@online.de>**20210302104856\n Ignore-this: 4a83d729e21985c54f7431099874563338df07e206c87e680d80c8b5a032b5a3c2c5b5465fac63f3\n] \n\n[make pending and unrevert follow transaction protocol\nBen Franksen <ben.franksen@online.de>**20210302092935\n Ignore-this: b5d9d59fc0d03a6dfc1a67507a035a59e5a1350f784ced55780cd19b70faca606ae9f7a623e8c72d\n \n This means that all modifications are made to the tentative versions and\n that we define and systematically use revert/finalize.\n \n Note that the implementations of revertTentativeUnrevert and\n finalizeTentativeUnrevert are tricky: the case where we have no unrevert\n bundle present must be handled carefully.\n] \n\n[make D.R.Traverse procedures RW so they work on the tentative state\nBen Franksen <ben.franksen@online.de>**20210303141232\n Ignore-this: bc5346f4bf3470f5189972bac38a7cbd615b2af86293448910dd4c27dcb3004667b6ceb5056bfeee\n \n This required fixing convert import where cleanRepository was called after\n finalizing the transaction.\n] \n\n[remove the tentative state witness parameter for Repository\nBen Franksen <ben.franksen@online.de>**20210301151635\n Ignore-this: d2baeed808cbb74b9a12361abe84f090d8e7e5db6d787c0ba1943c14a17a8f71ecc6e1c26d4fc8cc\n \n Since we now distinguish at the type level and at runtime whether we are in\n a transaction or not, it no longer makes sense to keep the distinction\n between the recorded and the tentative state: inside a transaction the\n recorded state is irrelevant and should be ignored, while outside a\n transaction the tentative state should be ignored and only the recorded\n state is relevant. When we start a transaction both states coincide by\n definition (we throw away any existing tentative state). When we end a\n transaction, we throw away the recorded state and overwrite it with the\n tentative one.\n \n Note that not all of Darcs.Repository has been changed yet to follow the\n transaction protocol yet, in particular the pending and unrevert states.\n This will be done in a later patch because the distinction between recorded\n and tentative state gets in the way of making the decision at runtime when\n reading the state. Also note that while this patch touches many lines of\n code, the changes are very systematic and mostly mechanical.\n] \n\n[fix rt ~ 'RO in AskAboutDeps\nBen Franksen <ben.franksen@online.de>**20210301152702\n Ignore-this: a7407c6f80e3eb5875536ce8fc7a670f138961589efc005811c178f402d9526417089761c838ca6c\n] \n\n[replace readTentativePristine with the generalized readPristine\nBen Franksen <ben.franksen@online.de>**20210227101454\n Ignore-this: d9d1cf61973e9ab95dc708b373f7aadd3e272ff4165eec573ab5e1f44c12581c87c093abd3dd3407\n \n The latter now now does the right thing for both RO and RW repos.\n] \n\n[convert D.R.Pristine to assign the correct access type parameters\nBen Franksen <ben.franksen@online.de>**20210227102318\n Ignore-this: 63c809826e1067304cb7ce41218b14618e17244bc9a3d96c321659b8a1426735f9ef9d791203d821\n \n The same schema as in D.R.Hashed applies: functions that modify the\n tentative pristine are only available for 'RW typed repos, those that only\n read pristine decide at runtime which files to read and stay polymorphic.\n \n A special (and ugly) case is replacePristine which has a case for 'RO typed\n repos, which should only be used when creating a fresh repo. The 'RW case\n now modifies the tentative pristine, so we need to add missing finalization\n in the repair and optimize pristine commands.\n] \n\n[convert size-prefixed pristine when we start a transaction\nBen Franksen <ben.franksen@online.de>**20210227084925\n Ignore-this: c65c10432771c40ca52a6ff0d8598d6495129c95c08e01725187bc3191670461c92244bf73c3a5c5\n \n We must not modify _darcs/hashed_inventory except when finalizing a\n transaction.\n] \n\n[writeTentativeInventory now takes a Repository argument\nBen Franksen <ben.franksen@online.de>**20210225212710\n Ignore-this: c90aad2cd771f5819bf7f488282a5562d1bc7ed41884f575d757670746c6f87b398db2ce30692e8\n] \n\n[lock/unlock inside revert/finalizeRepositoryChanges\nBen Franksen <ben.franksen@online.de>**20210225115451\n Ignore-this: a79c711ff6321244cce72b943864c639f49d362a296fbb5a34b7c805c6b88eb6e7469460e9354cf1\n \n This has the disadvantage that intermediate commits also unlock the\n repository for a short time. However, intermediate commits are mostly\n unnecessary, the only remaining instance is in convert darcs-2, which will\n soon become obsolete anyway.\n] \n\n[convert D.R.Hashed functions to take access typed Repository\nBen Franksen <ben.franksen@online.de>**20210225154559\n Ignore-this: ab05083221ceaa72f2558fbc88b0ca8e4027c5aaf985cfa085f6233ff9c9f6215a77eb1fd34490dc\n \n All procedures in D.R.Hashed that access the tentative state now take a\n Repository 'RW, while 'readPatches' stays polymorphic, but reads the\n tentative or the recorded state, depending on the Repository access type\n parameter. This required to export SAccessType from D.R.InternalTypes and\n return that type from repoAccessType, so that pattern matching on the result\n forces unification of the Repository's access type.\n] \n\n[re-type the rt type parameter to AccessType=RO|RW\nBen Franksen <ben.franksen@online.de>**20210224230403\n Ignore-this: 58799b29145cd3924411fd902ab7e49772d5950a77a159bfd6d31d6ef6370c8d92184cbf9a875455\n \n This patch does not yet go the full way of changing all Repository access\n procedures, only some of the central pieces: revertRepositoryChanges and\n finalizeRepositoryChanges, withRepoLock, repo creation and identification.\n Commands that call withRepoLock now take the lock even when --dry-run is in\n effect. This fixes a potential race condition because in dry-run mode these\n commands still modified the tentative state on disk. Instead, the dry-run\n option is now evaluated in the finalizing procedures (which includes,\n currently, addPendingDiffToPending and addToPending).\n] \n\n[remove rt::RepoType type parameter from PatchSet and PatchInfoAnd\nBen Franksen <ben.franksen@online.de>**20210224225716\n Ignore-this: 21347143ab31dc16399b2b1d7145f88d715d713d92a0f05c74cb6a32948c392a9aa7fe2ea2790a3a\n] \n\n[remove most of Darcs.Patch.RepoType\nBen Franksen <ben.franksen@online.de>**20210119150023\n Ignore-this: eee8e2332d551296501be870481b04f1d24ef7356ca9c7c91fe3a37c0d000b953b0d9064cefe2aad\n \n This removes the type distinction between repos with and without a rebase in\n progress. The 'rt :: RepoType' type parameter (and its kind RepoType) are\n kept for now, in case we ever want to re-introduce such a type distinction\n for some other purpose.\n] \n\n[TAG 2.17.2\nBen Franksen <ben.franksen@online.de>**20220513093526\n Ignore-this: bda65bc3dc68d0ee3af31fa6bf420ee54967539a84e0ac324bc7b680cb38da7ec5cdf9b1c8efe68e\n] \n"