Just "\nContext:\n\n\n[rename PatchTree to PatchSeq\nBen Franksen <ben.franksen@online.de>**20210619072740\n Ignore-this: d85d8ed86763a82296fd2d1e8bda8a10eadc9cc8244627179f62b1af7474a571caf5c52cb2f7b8c2\n \n This is about the PatchTree defined by the implementation of the test\n command. The renaming was done because semantically it is a sequence with\n guaranteed O(1) concatenation.\n] \n\n[patch index: cleanup doc comments\nBen Franksen <ben.franksen@online.de>**20210610120909\n Ignore-this: 8338b392d1a22f71122e0c2f6bd7fcfc4524fed5ed473967aaf586ebab535b0ccc0c77783007778a\n] \n\n[patch index: optimize Set Word32 -> IntSet\nBen Franksen <ben.franksen@online.de>**20210610121541\n Ignore-this: 3f64ba8278cc2a83401775d65ffb0220990977242083054901d791021b0e2d98eafd3a664c2ed61\n \n This trades a bit of memory (at least on 64 bit archs) for the ability to\n use an optimized data structure. The version number gets increased to 5.\n] \n\n[patch index: massive performance improvement\nBen Franksen <ben.franksen@online.de>**20181004160731\n Ignore-this: d02cd79fc9d674d6432479c574f9d971a6b7fa3c5c46049cff63db8b6117ae09c3ce21d32409e9a6\n \n By definition, a directory is regarded as touched whenever a file or\n directory beneath it is. This information was laboriously re-constructed at\n query time (in maybeFilterPatches), which could be very slow when a\n directory had many children. It is much more efficient to add this\n information immediately when we build or update the patch index. This\n requires no change to the data structures, just additional inserts.\n Nonetheless, this is a format change, so we have to increase the version\n number to 4.\n] \n\n[improve doc comment for D.U.Path.parents\nBen Franksen <ben.franksen@online.de>**20210610114804\n Ignore-this: 224d8265f15847261f6abd1d74ce0a30d8bd811d696a95da9fc6e4005efe8f6b142927c98507ba7c\n] \n\n[patch index: reformat a doc comment\nBen Franksen <ben.franksen@online.de>**20210610120501\n Ignore-this: 665a824caca2b970d25fabf22eb85d688bec52632d00d77ee9ebeb292d32d473856329b9aebb4d9c\n] \n\n[patch index: import from Darcs.Patch.Index.Types explicitly\nBen Franksen <ben.franksen@online.de>**20210610120619\n Ignore-this: 55342c521619ad0b3d0a206affc765a6b6214b62f22166e71057b4349e4d482a5663e5081f55bfa4\n] \n\n[patch index: debug messages when loading\nBen Franksen <ben.franksen@online.de>**20210610120949\n Ignore-this: 66b640cde02f352c7905afe48b4cfa6067b041f3ebc1af5e6389ea565e428b05ddbb607a9d0cb0f4\n] \n\n[patch index: remove another kludge for broken move patches\nBen Franksen <ben.franksen@online.de>**20210610190038\n Ignore-this: d5fa46e3cfd90d65313facc204d8cbdada8048b223468f79272f9c3830474807c224364ab25677ac\n] \n\n[D.U.Cache: break some overlong code lines\nBen Franksen <ben.franksen@online.de>**20210530174641\n Ignore-this: 8e376bfa92254f13ec103fe4d8b1cc6504018a4d4b7e15acfc9f7797e1c144c6b2c14cc14c103046\n] \n\n[D.U.Cache: improve docs for copyFileUsingCache\nBen Franksen <ben.franksen@online.de>**20210530083923\n Ignore-this: 34f94013864d23ecacbe848fb23864b6a7dbb66242bfe55c325eff647ec14ec1645cee1fdb184bb5\n] \n\n[D.U.Cache: break an overlong comment line\nBen Franksen <ben.franksen@online.de>**20210530082750\n Ignore-this: d67397d305b96eb47622d0ac37fc262d86f462019d528ee57bbe57bfb017d3c952c77684d4d25635\n] \n\n[D.U.Cache: if -> case\nBen Franksen <ben.franksen@online.de>**20210530082718\n Ignore-this: 1186063d9c7ca5ceba5b70944ccbe795855ed7dd534560c9a750aa9d6ff7704daa0fa3832968206e\n] \n\n[allow rebase unsuspend when there are unrecorded changes\nBen Franksen <ben.franksen@online.de>**20210302205215\n Ignore-this: 175b38f92b2e0927b807a56cff680debb3d1856d2caba624ab8dd4b1eaced3d84772d26a3328e8b8\n \n We still fail if the effect of the unsuspended patches (including the\n resolution for any residual fixups) conflicts with unrecorded.\n] \n\n[rebase unsuspend: code layout and a few renamings\nBen Franksen <ben.franksen@online.de>**20210302185613\n Ignore-this: 7301a87235935506314c35baedd42387e7cd1abc298a1c61631b3fdc72dfadd2b3367c44a16bd7cc\n] \n\n[tests/broken_move.sh: adapt to better apply error messages\nBen Franksen <ben.franksen@online.de>**20210317074545\n Ignore-this: 999e8c6a0f46b5b2084dca38822af25cf68c9e324f3a5a3e5329397d774d95993cac3c3b9667eb6a\n] \n\n[trivial refactor in D.R.Unrevert for better readability\nBen Franksen <ben.franksen@online.de>**20210306060231\n Ignore-this: 33b6dab0bdf4c7833846f97e9ba629d94924df46e9456e6a714fe70323b2caf09b9bd5f38b1a374b\n] \n\n[fix: add missing dry-run guards when calling applyToWorking\nBen Franksen <ben.franksen@online.de>**20210302141145\n Ignore-this: 7a1765bc2e8f8295f6d289c4489a3d3bcd399183e1c8f1ddb7e9754f1a33512af641c9332f5a8915\n \n applyToWorking is done after we finalize the transaction, indeed it isn't\n guarded by the transaction at all, since we cannot enforce mutual exclusion\n in the working tree.\n] \n\n[refactor rebase unsuspend\nBen Franksen <ben.franksen@online.de>**20210302184810\n Ignore-this: f0d1722fd9abbf0da5cf527271a71d52189c329cf127b666dd5fc0079113fb6ac9fabd02a336c49c\n \n The local function hijack that replaces the previous doAdd is more modular.\n It gets the selected suspended patches and those we want to keep as input\n and outputs a changed pair where the the patches to be unsuspended have been\n renamed. We then add these patches to the repo without updating the pending\n patch, so we can afterwards directly set pending to the resolution.\n \n For reasons that are mysterious to me, coercing just the added renames after\n commuting them no longer works; the mere act of matching the type of the\n rename patch introduces a fresh type variable for the underlying patch type.\n] \n\n[remove the unsafe tentativelyAddToPending, replace with addToPending\nBen Franksen <ben.franksen@online.de>**20210302150625\n Ignore-this: cce3b2d0ecab7060153fa6a357efa83f22c2b0f1e60d57b631ccef7f1b9a6660a30d3b48f353dd7d\n \n The fact that this type checks witnesses the fact that indeed using\n tentativelyAddToPending was wrong: the patches we pass all start at the\n unrecorded state and thus should be commuted past the difference between\n pending and working before appending them to pending. This is what\n addToPending does which is why it is the safer choice here.\n] \n\n[remove command: fix code layout of makeRemovePatch\nBen Franksen <ben.franksen@online.de>**20210306081307\n Ignore-this: 3c304915cb90f06dadd0b983c8b6e2c1ffddb86159b396a7e542cbd32cf46e5eab3e32d76e84fade\n] \n\n[rename addPendingDiffToPending to unsafeAddToPending\nBen Franksen <ben.franksen@online.de>**20210302132611\n Ignore-this: c64370f6ea0a98e2db90a644b6ac511751f998fdb4182c42de9f18ff1c2c8f3dd8a9849800da8236\n] \n\n[refactor askAboutDepends and updatePatchHeader\nBen Franksen <ben.franksen@online.de>**20201103184646\n Ignore-this: 2b0a19d8493f0a6195954633337e4169f02ed61ac6304e690f808de5947d6aa6780ac51517a8d94f\n \n My immediate goal with this was to avoid making repository requests inside\n updatePatchHeader. Thus AskAboutDeps now contains a PatchSet instead of a\n Repository. But for the amend command the patchset we pass in is not the\n recorded patches but rather the recorded patches minus the selected patch.\n So we have to reconstruct this patchset. This is best done by not throwing\n away patches in the first place, but instead return unselected patches from\n filterNotInRemote as well as withSelectedPatchFromList. Incidentally this\n fixes a problem when we de-select the latest clean tag: before this patch\n amend would print all patches in the repo. This is now avoided by calling\n contextPatches when --not-in-remote is /not/ in effect.\n] \n\n[convert import/darcs-2: recognize the compress and diffAlgorithm options\nBen Franksen <ben.franksen@online.de>**20210303145001\n Ignore-this: 85558b53cb6d96f71f8f685002d80e3a8f41fa88b023194b59df8fa17f2436eab6aeb1f95ea6ebc3\n \n This avoids hard-coding some arbitrarily chosen value.\n] \n\n[push command: simplify some type signatures\nBen Franksen <ben.franksen@online.de>**20210306155755\n Ignore-this: d33ae7076991232fb40a0f3bb39582d95bb6ef49c609bdaec14107d1e23b45571414ce90004b0a50\n] \n\n[clean up getRecordedUpToMatch and the commands that use it\nBen Franksen <ben.franksen@online.de>**20210306120104\n Ignore-this: 98887f4d9c62a71ae04795aa300e557c88dae8a66095c5f5d3bd50844da585fecca1f582e1b527\n \n The procedure now returns a tree and has been renamed to\n getPristineUpToMatch. The commands that use it (dist, show files, show\n contents) now work directly with the resulting tree, rather than a freshly\n created temporary working directory. This is a lot simpler and more\n efficient. Incidentally, it allows to easily support match options for\n --zip.\n \n However, the predist command expects to be run inside a working tree. So we\n write out the tree to a temporary directory before the predist and read it\n back in afterwards. The extra cost of this is payed only if a predist\n command has been set (using setpref predist).\n] \n\n[remove the useless optimize pristine subcommand\nBen Franksen <ben.franksen@online.de>**20210510113544\n Ignore-this: 1c75fd4ccfbe80df50059810df5d91dcf60cc4fd7c5b6715a01ec5761df701a451a636763f654133\n \n Upgrading the pristine from the size-prefixed format is done automatically.\n] \n\n[generalize readPatchesHashed and use in readTentativePatches\nBen Franksen <ben.franksen@online.de>**20210327055207\n Ignore-this: 5c1771aacdbc2ee22e02e37e46b5b72621c02fa5bfa5b703ea803da6a7854c13c3529170d1fbc57b\n] \n\n[return hash from writePristine\nBen Franksen <ben.franksen@online.de>**20210324172607\n Ignore-this: 92cfee04b27714e70f51b42bb3c107c231f17ba497071e89dd04b6054911259a782a66260c03c562\n] \n\n[fix the order of parameters to Tagged\nBen Franksen <ben.franksen@online.de>**20210327050259\n Ignore-this: c8c6812ba8b25fa932a134d5a4839b300ab98442484799fbab71704be4fcf6716391e8fe44a2c322\n \n The order is now 'Tagged patches tag hash', i.e. patches come before the tag\n that covers them. I should have done this years ago when I established the\n convention that patches always appear in left to right application order.\n] \n\n[simplify writeInventory and writeTentativeInventory\nBen Franksen <ben.franksen@online.de>**20210324053723\n Ignore-this: cc354cfc9ccdfe121d8356195aad6f4a7b00bbbb08286282a03376b12b6bd7039f09af604b908f14\n \n The simplification consists of no longer treating empty inventories\n specially. It involves is a minor change in behavior in that an empty\n inventory is now written to disk as a hashed file; which is the reason we\n have to adapt tests/issue1987.sh. Indeed, my original motivation for the\n refactor was so to make writeInventory return a hash unconditionally.\n] \n\n[TreeMonad: explicit import of D.U.Path, some simplifications\nBen Franksen <ben.franksen@online.de>**20210316072251\n Ignore-this: bd080c44431b62746a21a1f508eb3a1b03f41993494e26290d09b16eb92f2f9af9849eb781ca92e6\n] \n\n[better error handling when applying patches\nBen Franksen <ben.franksen@online.de>**20210314220059\n Ignore-this: 7435723695779f02418fae12f5326c3b029a23ba9dd1aa67cbce525f41c74dca35f7cea67476426d\n \n In the TreeMonad we now throw the IO errors that fit the situation instead\n of userError. This allows us to give getter warning messages when using\n runTolerantly. In addition, if we cannot run tolerantly, i.e. when we apply\n patches to pristine, we now notify the user which patch caused the problem\n and suggest to run 'darcs repair' on the repo that contains the broken\n patch. This is important because we no longer silently ignore broken move\n patches.\n] \n\n[replace readTentativePatches with readPatches\nBen Franksen <ben.franksen@online.de>**20210301201958\n Ignore-this: 98d4665d77887ce616540cc11ade28616e4c1458303a8341e01a479bebde69c383dfb905bc6b0bd\n] \n\n[fix TODO item in remove command\nBen Franksen <ben.franksen@online.de>**20210306083156\n Ignore-this: be3afd76238a64f34c901ad96dc98509d44042c6a90e698317d3cb9b8d4dfdc62f9ddbac796f910f\n] \n\n[import tentativelyRemoveFromPW via Darcs.Repository\nBen Franksen <ben.franksen@online.de>**20210301152620\n Ignore-this: bb37ef9fe31d2be6d830cf23faff248870b333e4040f91b84fa6b0c0f966d90526f22f12dea71788\n] \n\n[remove out-commented code in D.UI.C.Repair\nBen Franksen <ben.franksen@online.de>**20210324060633\n Ignore-this: 9011bab75c4606569b79622691514c6dbee913d0b9bcd6aed72f4ccde433971a5f49ad7f9a95fdb6\n] \n\n[rename unrevertPatchBundle to readUnrevert\nBen Franksen <ben.franksen@online.de>**20210325082039\n Ignore-this: 90e0bfd9e1cb4711e33a8a351fcec1f58d9b0136740ff7a1468e1057204c35c2372316d7c53074cf\n] \n\n[lift writeInventoryPrivate to the top level and rename to writeInventory\nBen Franksen <ben.franksen@online.de>**20201103063416\n Ignore-this: ec7d61553da2ce9972616ec2ef2d3e63f4158d3b054f34ad41ea26ec3ef9d5a0d66b08e9e1f153a5\n] \n\n[use withRepoDir in createPacks\nBen Franksen <ben.franksen@online.de>**20210315162432\n Ignore-this: b7141bfd23d7c787f27eb919010c08aec95162bffbfe4775fdff3a1e5868c5a85a46e331290f86d9\n \n This simplifies its use in darcsden.\n] \n\n[move hash validation from D.R.Inventory to D.Util.Cache\nBen Franksen <ben.franksen@online.de>**20210327075324\n Ignore-this: d020f2ac5800819b5eba063a53901aa2f64ccb1222354bad6ed556d89a67945d273e225fb3c39ad9\n] \n\n[move D.R.Inventory to D.R.Inventory.Format\nBen Franksen <ben.franksen@online.de>**20210327054814\n Ignore-this: 32dd92b2be5f2ab200d7f349372086cb6ac4e2def2b09ac8b1e3f3a1c80cab63801b3b00ead079c1\n \n This is so that we can move the code conerned with reading and writing\n inventories to D.R.Inventory w/o mixing the inventory format with its\n interpretation.\n] \n\n[fix generator for hashes in D.T.R.Inventory\nBen Franksen <ben.franksen@online.de>**20210324023216\n Ignore-this: 942b9deff9c67365da5f57e55670502bd5892dd64771edc5e69cca26e5ab426c8f5d215c3d5b9682\n] \n\n[validate hashes in inventories on the ByteString side\nBen Franksen <ben.franksen@online.de>**20210314083456\n Ignore-this: 87fc6ffe037ab46a792e4466db85b028f92e593edb2219529dbd6f7c814e9c1610e7a8e76e4ab835\n \n For reasons I haven't been able to figure out this drastically reduces\n memory consumption.\n] \n\n[avoid re-validation of already validated patch hashes\nBen Franksen <ben.franksen@online.de>**20210308093608\n Ignore-this: 9c03b65a47f366271b0beee735a3e8d6b5e72fe0031d405d4d701caee84c89fc646e8d3408493b18\n] \n\n[cache: refactor cacheHash and remove export\nBen Franksen <ben.franksen@online.de>**20210307101410\n Ignore-this: bb33fb17c07c2e8300ceb4731969faf823dc175a37e6fc2881ff4a00160a0a97b7b26a4e7ba79e05\n] \n\n[use ShortByteString for Hash content\nBen Franksen <ben.franksen@online.de>**20210307162525\n Ignore-this: 343006f7acead5b3f3d044b3454fc7e6370d7d9ec177b13f45bf9c365c88b0e4a8e414a128c1cb37\n \n This should bring down memory use and decrease fragmentation.\n] \n\n[cache: inline copyFilesUsingCache\nBen Franksen <ben.franksen@online.de>**20210307101327\n Ignore-this: 1039cb3158ce64caec81b74958e68546a7c5c1f6ff62a7cc5b1adfe3ade34b49bbc3bcf03d100b5d\n] \n\n[fix in checkSuspendedStatus and maybeDisplaySuspendedStatus\nBen Franksen <ben.franksen@online.de>**20210228104448\n Ignore-this: 6c90b32f275a99e6d66cdd05bac997aaa1dae3a1694db9326e4c1fa979a57798cee6f34e83c308cd\n \n We must not try to access either of the rebase patch files if the repo\n location is a remote URL.\n] \n\n[convert darcs-2: remove intermediate commits\nBen Franksen <ben.franksen@online.de>**20210617101048\n Ignore-this: fc35c5ca37a0014148a274c6e953b147759f898249e72249ee0aca4118e1f0f341e06f45ce258a33\n \n There are two reasons for this change. One is that intermediate commits open\n a brief window in which the repo is not locked. Since this happens in a\n newly created repo, this is not of much practical concern and more a matter\n of principle. Second, intermediate commits serve no purpose. If conversion\n runs into an exception you will end up with a partially converted repo (the\n state of the last commit). This is quite useless, since there is no way to\n restart the conversion at this point.\n] \n\n[convert darcs-2: honor the compress option\nBen Franksen <ben.franksen@online.de>**20210303143641\n Ignore-this: 4178cc4194d62d3fa7593c1eef428eed7ce98933308d1614584e683cc3b3030021553fb0acb605bf\n] \n\n[convert darcs-2: add a final call to finalizeRepositoryChanges\nBen Franksen <ben.franksen@online.de>**20210303142815\n Ignore-this: 17c6f2ca4af83cde9b7f0cf3a3d7963133eb8a87ae9229cd95131b9ad50dedc7661d1b883db9d5\n \n This is more a matter of principle than necessity, since the code does work\n without the call.\n] \n\n[ci: exclude macOS-10.15 && ghc-8.10.4\nBen Franksen <ben.franksen@online.de>**20210611183809\n Ignore-this: 315739f6a58998368cf6dd068d4da8e459374681914f08b0dffc21d923fdc08aef6f6da3d301d699\n] \n\n[get rid of \"nasty hack\" in applyPatchesForRebaseCmd\nBen Franksen <ben.franksen@online.de>**20210302104856\n Ignore-this: 4a83d729e21985c54f7431099874563338df07e206c87e680d80c8b5a032b5a3c2c5b5465fac63f3\n] \n\n[make pending and unrevert follow transaction protocol\nBen Franksen <ben.franksen@online.de>**20210302092935\n Ignore-this: b5d9d59fc0d03a6dfc1a67507a035a59e5a1350f784ced55780cd19b70faca606ae9f7a623e8c72d\n \n This means that all modifications are made to the tentative versions and\n that we define and systematically use revert/finalize.\n \n Note that the implementations of revertTentativeUnrevert and\n finalizeTentativeUnrevert are tricky: the case where we have no unrevert\n bundle present must be handled carefully.\n] \n\n[make D.R.Traverse procedures RW so they work on the tentative state\nBen Franksen <ben.franksen@online.de>**20210303141232\n Ignore-this: bc5346f4bf3470f5189972bac38a7cbd615b2af86293448910dd4c27dcb3004667b6ceb5056bfeee\n \n This required fixing convert import where cleanRepository was called after\n finalizing the transaction.\n] \n\n[lock/unlock inside revert/finalizeRepositoryChanges\nBen Franksen <ben.franksen@online.de>**20210225115451\n Ignore-this: a79c711ff6321244cce72b943864c639f49d362a296fbb5a34b7c805c6b88eb6e7469460e9354cf1\n \n This has the disadvantage that intermediate commits also unlock the\n repository for a short time. However, intermediate commits are mostly\n unnecessary, the only remaining instance is in convert darcs-2, which will\n soon become obsolete anyway.\n] \n\n[remove the tentative state witness parameter for Repository\nBen Franksen <ben.franksen@online.de>**20210301151635\n Ignore-this: d2baeed808cbb74b9a12361abe84f090d8e7e5db6d787c0ba1943c14a17a8f71ecc6e1c26d4fc8cc\n \n Since we now distinguish at the type level and at runtime whether we are in\n a transaction or not, it no longer makes sense to keep the distinction\n between the recorded and the tentative state: inside a transaction the\n recorded state is irrelevant and should be ignored, while outside a\n transaction the tentative state should be ignored and only the recorded\n state is relevant. When we start a transaction both states coincide by\n definition (we throw away any existing tentative state). When we end a\n transaction, we throw away the recorded state and overwrite it with the\n tentative one.\n \n Note that not all of Darcs.Repository has been changed yet to follow the\n transaction protocol yet, in particular the pending and unrevert states.\n This will be done in a later patch because the distinction between recorded\n and tentative state gets in the way of making the decision at runtime when\n reading the state. Also note that while this patch touches many lines of\n code, the changes are very systematic and mostly mechanical.\n] \n\n[replace readTentativePristine with the generalized readPristine\nBen Franksen <ben.franksen@online.de>**20210227101454\n Ignore-this: d9d1cf61973e9ab95dc708b373f7aadd3e272ff4165eec573ab5e1f44c12581c87c093abd3dd3407\n \n The latter now now does the right thing for both RO and RW repos.\n] \n\n[fix rt ~ 'RO in AskAboutDeps\nBen Franksen <ben.franksen@online.de>**20210301152702\n Ignore-this: a7407c6f80e3eb5875536ce8fc7a670f138961589efc005811c178f402d9526417089761c838ca6c\n] \n\n[convert D.R.Pristine to assign the correct access type parameters\nBen Franksen <ben.franksen@online.de>**20210227102318\n Ignore-this: 63c809826e1067304cb7ce41218b14618e17244bc9a3d96c321659b8a1426735f9ef9d791203d821\n \n The same schema as in D.R.Hashed applies: functions that modify the\n tentative pristine are only available for 'RW typed repos, those that only\n read pristine decide at runtime which files to read and stay polymorphic.\n \n A special (and ugly) case is replacePristine which has a case for 'RO typed\n repos, which should only be used when creating a fresh repo. The 'RW case\n now modifies the tentative pristine, so we need to add missing finalization\n in the repair and optimize pristine commands.\n] \n\n[convert size-prefixed pristine when we start a transaction\nBen Franksen <ben.franksen@online.de>**20210227084925\n Ignore-this: c65c10432771c40ca52a6ff0d8598d6495129c95c08e01725187bc3191670461c92244bf73c3a5c5\n \n We must not modify _darcs/hashed_inventory except when finalizing a\n transaction.\n] \n\n[writeTentativeInventory now takes a Repository argument\nBen Franksen <ben.franksen@online.de>**20210225212710\n Ignore-this: c90aad2cd771f5819bf7f488282a5562d1bc7ed41884f575d757670746c6f87b398db2ce30692e8\n] \n\n[convert D.R.Hashed functions to take access typed Repository\nBen Franksen <ben.franksen@online.de>**20210225154559\n Ignore-this: ab05083221ceaa72f2558fbc88b0ca8e4027c5aaf985cfa085f6233ff9c9f6215a77eb1fd34490dc\n \n All procedures in D.R.Hashed that access the tentative state now take a\n Repository 'RW, while 'readPatches' stays polymorphic, but reads the\n tentative or the recorded state, depending on the Repository access type\n parameter. This required to export SAccessType from D.R.InternalTypes and\n return that type from repoAccessType, so that pattern matching on the result\n forces unification of the Repository's access type.\n] \n\n[re-type the rt type parameter to AccessType=RO|RW\nBen Franksen <ben.franksen@online.de>**20210224230403\n Ignore-this: 58799b29145cd3924411fd902ab7e49772d5950a77a159bfd6d31d6ef6370c8d92184cbf9a875455\n \n This patch does not yet go the full way of changing all Repository access\n procedures, only some of the central pieces: revertRepositoryChanges and\n finalizeRepositoryChanges, withRepoLock, repo creation and identification.\n Commands that call withRepoLock now take the lock even when --dry-run is in\n effect. This fixes a potential race condition because in dry-run mode these\n commands still modified the tentative state on disk. Instead, the dry-run\n option is now evaluated in the finalizing procedures (which includes,\n currently, addPendingDiffToPending and addToPending).\n] \n\n[remove rt::RepoType type parameter from PatchSet and PatchInfoAnd\nBen Franksen <ben.franksen@online.de>**20210224225716\n Ignore-this: 21347143ab31dc16399b2b1d7145f88d715d713d92a0f05c74cb6a32948c392a9aa7fe2ea2790a3a\n] \n\n[decouple IsPrimV1 from ApplyState p ~ Tree, simplify runJob\nBen Franksen <ben.franksen@online.de>**20210323143203\n Ignore-this: 7831d21dc0347f2a8edfcd5d27363f04bf3213d5117acdb23f4778b545ca54ae3847fdcd2acb0509\n \n The extra 'ApplyState p ~ Tree' constraint was only for convenience, the\n same effect is achieved with a separate call to checkTree. The rest of the\n changes is replacing case matches with 'Dict <- return checkXxx' which I\n find leads to more readable code because it avoids extra indentation. And\n since all cases of runJob require the 'ApplyState p ~ Tree' constraint\n anyway, we can now float the checkTree out of the large case expression.\n] \n\n[remove most of Darcs.Patch.RepoType\nBen Franksen <ben.franksen@online.de>**20210119150023\n Ignore-this: eee8e2332d551296501be870481b04f1d24ef7356ca9c7c91fe3a37c0d000b953b0d9064cefe2aad\n \n This removes the type distinction between repos with and without a rebase in\n progress. The 'rt :: RepoType' type parameter (and its kind RepoType) are\n kept for now, in case we ever want to re-introduce such a type distinction\n for some other purpose.\n] \n\n[replace class ApplyMonadState with a top-level type family\nBen Franksen <ben.franksen@online.de>**20210403052400\n Ignore-this: 44e612123ac4c648172b7faa858c454e06202979d4786b5b995af23320de86d1fa81ebfd4e06993b\n \n The class ApplyMonadState was only there to carry the type (constraint)\n family ApplyMonadStateOperations, which I renamed to ApplyMonadOperations\n for brevity.\n] \n\n[cleanup method definitions in D.P.ApplyMonad\nBen Franksen <ben.franksen@online.de>**20210315204754\n Ignore-this: 857d05e8ebefd55ce919d8f0a5e0ee04d52f414fbb67309b7cc95502e912e260dc7300424da4d87c\n \n This removes -fno-warn-missing-methods and explicitly defines missing\n methods as undefined. The default definition of mCreateFile in terms of\n mModifyFilePS is removed. Defining a proper mCreateFile means we can remove\n the existence check from the definition of mModifyFilePS in the instance\n ApplyMonadTree (TM.TreeMonad m).\n] \n\n[remove unused RestrictedApply from D.P.ApplyMonad\nBen Franksen <ben.franksen@online.de>**20210315204621\n Ignore-this: a6baf4368bd7a8894afb559badab38c2ecb6814ff4e4867efc1967815449c2f5fa0d79dcd1590e83\n] \n\n[cleanup code layout of Darcs.Util.Tree.expandUpdate\nBen Franksen <ben.franksen@online.de>**20210429083448\n Ignore-this: 1c2fc782fbbdb3d25cd7ba394c87a8a291626d69a2c1250f9970b280d223f3c4fbe2b5d4a208694c\n] \n\n[add comment to updateHashes in convert import command\nBen Franksen <ben.franksen@online.de>**20210421114628\n Ignore-this: 296fa556cd510a9a39204cbbbfe838d8e7c694f4118b413414c9e24997a63cbb0a12ff38022553ec\n] \n\n[remove an obsolete FIXME comment\nBen Franksen <ben.franksen@online.de>**20210418155917\n Ignore-this: d02fdab017f3223ae4e01efdea2223816f9656abd3ff9d474605c71faeaeef1d1a3f234e8209b88c\n] \n\n[remove duplicate import of darcsAddMissingHashes\nBen Franksen <ben.franksen@online.de>**20210329092310\n Ignore-this: 5768fb8482f22fcc01214bd6f1dd4f465620dff4c892bc3a782bbb431b63ca8cec303e0c213e6be5\n] \n\n[rename replacePristine to writePristine\nBen Franksen <ben.franksen@online.de>**20210227104011\n Ignore-this: 1e83843b748164d7d69358dd5e5c8d068e8556d0b5eb8a6b523d1202a531affebd3f48dee734a2a9\n] \n\n[inline writePristine into the slightly safer replacePristine\nBen Franksen <ben.franksen@online.de>**20210227065632\n Ignore-this: 67be252d4074427f4eda80cdd0b32d9f1df2f6a8a0d01cb765f2f33b126348d647ae8cefcf6c3306\n] \n\n[move writePristine and replacePristine to D.R.Pristine\nBen Franksen <ben.franksen@online.de>**20210226072752\n Ignore-this: 962840dcfe69dc9c7e75d9ff594feb7e8abe592019639c5b0a4c07972124d9ec96ffcbb370fc64dd\n] \n\n[inline D.R.Pristine.withRecorded\nBen Franksen <ben.franksen@online.de>**20210225201917\n Ignore-this: fd7096445bc1ad5649531dd7d7e84c56e2282e468c1a1c1fda73fe67093deb6b28568c2af07687f2\n] \n\n[show index: print table headers\nBen Franksen <ben.franksen@online.de>**20210415095307\n Ignore-this: 18a6aa1d67b99042fcd7922a1759b1c1dc92e6c27da170da59a10eebc9ea1e68ee118098360966d7\n] \n\n[factor out delaySealed\nBen Franksen <ben.franksen@online.de>**20210406121845\n Ignore-this: 5e4c7a5105d564f61001a823034e81451711a9614220300b83a4250cede65c3b021889f04e0baa0b\n] \n\n[add debug message in applyToWorking\nBen Franksen <ben.franksen@online.de>**20210314221902\n Ignore-this: 2f292e632a8e46c65b9797da6a91d24421d2f171d68f59c8c610d3bf9a615e4341528d11080eb1e0\n] \n\n[fix the haddocks for applyToHashedPristine\nBen Franksen <ben.franksen@online.de>**20210306155542\n Ignore-this: a2b27a89532379fcfdb4475e7526e1240b62b4b8ec85825080d923fa9e438f449148e1a64c7ca17a\n] \n\n[make readPristine fail for old-fashioned repos\nBen Franksen <ben.franksen@online.de>**20201109213344\n Ignore-this: d557e21edc3aa84d8cb10d674b0dbbc6e1a6add0b2bf1e9d30affefc0986a5ea30f68435166819e2\n \n The extra code for the case of repos that aren't in hashed format is\n apparently not needed.\n] \n\n[streamline the code in the darcs main module\nBen Franksen <ben.franksen@online.de>**20210304074801\n Ignore-this: 7ae5d5397e77c6a2b29955a1ae88e9524c09e94e127ad2c7a847d3c1a0adb3d4e86ce3724b415d44\n] \n\n[cleanup Darcs.Util.AtExit\nBen Franksen <ben.franksen@online.de>**20210304073226\n Ignore-this: 728c2bda1267808f6064e2414a4d764954a5249ecc198b640585d7d5fc7595644c64d43683ac5ef3\n \n Apart from layout changes, this replaces bracket_ with finally and removes\n the extra mask/unmask stuff; the exit action of bracket/finally is executed\n in masked state anyway, so any further masking/unmasking has no effect.\n] \n\n[D.R.Traverse: cut down the list of exported symbols\nBen Franksen <ben.franksen@online.de>**20210303140603\n Ignore-this: 72471dcd6daa900dd833bb4227859730392861d84cd96cb482d485e1a42e32db8d648d9587a8a577\n] \n\n[rename withRepoLocation -> withRepoDir\nBen Franksen <ben.franksen@online.de>**20210228122604\n Ignore-this: 59f365cd4b78349051c71ee8f359d8f47e2009117284b2bbef11d9e16bad31c804d1c6e30a0fc70b\n] \n\n[fix stale lock files after Ctrl-C\nBen Franksen <ben.franksen@online.de>**20210304064825\n Ignore-this: c362c176b5248c96fa9debb939c309266825ef2b513c2d1f539e8b7f53196cd24195ad9ffd269f40\n \n This changes the order of the handlers in the main function of the darcs\n executable, so that atexit is handled earlier than signals. This should also\n have the effect of removing temporary files and directories created using\n withDelayedDir in a more reliable manner.\n \n Both handleErrors and handleExecFail are uncritical, they merely re-classify\n and annotate certain exceptions and report them in a more user friendly\n fashion, so handleExitFail was also moved out of the withSignalsHandled.\n] \n\n[move command: readPlainTree -> readUnrecordedFiltered\nBen Franksen <ben.franksen@online.de>**20210122172254\n Ignore-this: 24506233de7ee3bdf560bbb72fab7621df4d586c53f910f709169346ea90c7f114d8c0c8ff1a9b90\n \n The difference is that readUnrecordedFiltered (with the given options) uses\n the index, if possible.\n] \n\n[ci: run tests only for latest cabal and earliest & latest ghc version\nBen Franksen <ben.franksen@online.de>**20210607073645\n Ignore-this: 38f4353188f3d7b8ffeea1fd600781f171e6bbfa6a84b259689a8080db371d75c12bb542eddb3d0b\n] \n\n[remove lookFor* functions from Darcs.UI.Flags\nBen Franksen <ben.franksen@online.de>**20210605143653\n Ignore-this: 251a3321032281674e26ff2f43894286dd0ee0c1be6047a8eb9617e1f3534b2a1c6ec82fac44f9a4\n \n Two of them are unused (outside of the defining module) and they all collide\n with the members of DiffOpts.\n] \n\n[remove duplicate definition of diffingOpts\nBen Franksen <ben.franksen@online.de>**20210605143413\n Ignore-this: 9980cd2b1b010097fcaec12fe1b97bf322a864cf375ed16d000387a6190a7c4bea2e0094f18e3d8a\n] \n\n[add PatchHeaderConfig\nBen Franksen <ben.franksen@online.de>**20210303171700\n Ignore-this: 51df902f048fe1bdc32146e544ef368824677bd4a88cc4a942db0175450fa667bab2ddccfdf12c37\n \n This groups everything we get from the command options into a record type to\n cut down on the number of parameters of updatePatchHeader. Also add the\n patchname option to rebase unsuspend and re-order the options so they are\n the same as for amend.\n] \n\n[tests/network/show_tags-remote.sh: remove directories\nBen Franksen <ben.franksen@online.de>**20210529153906\n Ignore-this: 4cb6240ee582a069e97478e207041769cbfa27c7674d1ecfa4630926a1cfae43977824a7bd6b58f\n] \n\n[tests for issue1327 and issue2047 fail only for darcs-1 and darcs-2\nBen Franksen <ben.franksen@online.de>**20210527165230\n Ignore-this: aa267cc3017b9d1eea875ff61adfbf9aa4920cdc1cdd5a8f0dc8bb7e6c5f000b1b927bb6c1edf488\n] \n\n[test for issue1579 no longer fails\nBen Franksen <ben.franksen@online.de>**20210527164014\n Ignore-this: 64bba9cb049c4ba78c7977145efbb5ac1f11e1522f4e19e6a1486ffbe18fb5e58da0c72a3f114cfa\n] \n\n[tests: mark issue1014 as no longer failing\nBen Franksen <ben.franksen@online.de>**20210527161920\n Ignore-this: 47d001eef87c89766407280be02af23afa1c6cb357dbf8c5d4ad97c182ee89231b7650167c69d0d5\n \n After fixing a few minor issues in the test script, this test succeeds for\n darcs-3 as that fixes the underlying issue. However, the test script needed\n a few minor fixes to actually fail for the right reason. In particular,\n cloning a conflicted repo nowadays applies conflict markup, which we have to\n revert before pulling, otherwise we get prompted and the test fails with\n \"promptChar: unexpected end of input\".\n] \n\n[remove overspecification of pending from tests\nBen Franksen <ben.franksen@online.de>**20210324072532\n Ignore-this: 3ce02680e19fd8e30aad4ecc0fb69585cce303e3cbb780c5d9a83f81b2b7bccecc086b0bbce92c5e\n \n The test scripts should not prescribe the concrete format of the pending\n patch, not even an empty one.\n] \n\n[harness: run test-framework with explicit RunnerOptions\nBen Franksen <ben.franksen@online.de>**20210303110226\n Ignore-this: 11651f3e41ad325e9608b2c367a866012616f6a58187b2425008932d87188daec3f3ffdfd4a50a17\n] \n\n[rebase unsuspend: add more patch editing options\nBen Franksen <ben.franksen@online.de>**20210302213552\n Ignore-this: 9173186fbc49dac677ded69fbddf52ff20b22d0c013207f3616fcb917cf915ba05864fe93965ae8\n \n These require no extra code, they are handled by updatePatchHeader.\n] \n\n[obliterate, rebase suspend: pass NoUpdatePending to tentativelyRemovePatches\nBen Franksen <ben.franksen@online.de>**20210302131340\n Ignore-this: 4f35536d5091c3c9cb671a380fa72156330b46cf9ea6ef7bb767b29e182c783af047c9e8cb5b3609\n \n This avoids the redundant use of the (unsafe) tentativelyAddToPending to\n remove what gets added to pending with YesUpdatePending.\n] \n\n[use path definitions from D.R.Paths in a few more places\nBen Franksen <ben.franksen@online.de>**20210227061118\n Ignore-this: 203551b945fc2af5c4eef5a6a6ac5de0f582e919bbfda840bae8b989dc993abb28e17fcdc8404d16\n] \n\n[remove some outdated or otherwise unfortunate comments\nBen Franksen <ben.franksen@online.de>**20210305061108\n Ignore-this: 1196b6fc176f6676db204d6ee9698cf342a7994a8d1804a777e3117a0b76015fefbb4e5a4df81184\n \n The \"otherwise unfortunate\" refers to mentions of repository file paths;\n these will become outdated if we make changes to them.\n] \n\n[use paths from D.R.Paths in D.R.Packs\nBen Franksen <ben.franksen@online.de>**20201108125712\n Ignore-this: 749668dc014f43ac07a19da7465a199285a4481f5ac8daa289e576a30c1399c938e76d3e1eb4cdc3\n \n This also removes an obsolete debugMessage and then inlines\n fetchFilesUsingCache.\n] \n\n[remove UpdatePending parameter to withRepoLock\nBen Franksen <ben.franksen@online.de>**20210122173346\n Ignore-this: c3bde2b310554f26a98d38f6cf97a0c75988b45429a4d16c53f694feb7b62e2c550f71d03a0b5280\n \n It turned out that we always call that procedure with YesUpdatePending, so\n we can as well hard-code it.\n] \n\n[simplify readPatchesUsingSpecificInventory\nBen Franksen <ben.franksen@online.de>**20201223204234\n Ignore-this: a73c7d343c1310e1aacb5d52c439efd3b9a97f7409a670b0e099fb532c60c74d6eececf8abdaf11b\n] \n\n[move revert/finalize of rebase from D.R.Hashed to D.R.Rebase\nBen Franksen <ben.franksen@online.de>**20210224124453\n Ignore-this: 84d15717486d2bc4ea795d024515aa2a339476c2f0cc9943024d761e588d871bde505ad1171ed60a\n] \n\n[in fetchFileLazyPS also check for URI scheme \"https:\"\nBen Franksen <ben.franksen@online.de>**20210525125416\n Ignore-this: 5606ea6f55be3edca3a7ee4507947095352692bd00b61fa15a7a4fb10b8031dd3b91fe430f9d9521\n] \n\n[D.R.Hashed: make debug messages less verbose\nBen Franksen <ben.franksen@online.de>**20210529152703\n Ignore-this: 181e110cf105cb1e25c525420522394bdff0cd604befa27ee4818c335f08139a974096c9a8d66416\n \n The patch name should be sufficient to see which patch is being read.\n] \n\n[Darcs.Util.SignalHandler: replace throw with throwIO\nBen Franksen <ben.franksen@online.de>**20210602203613\n Ignore-this: 933bfdeb1e297e6a62beadd3362607aa7cbae9562cd169cfb85e95a0088d5a9c1001f9e90c1ae716\n] \n\n[Darcs.Util.ByteString: avoid throwing exceptions from pure code\nBen Franksen <ben.franksen@online.de>**20210602203401\n Ignore-this: e6dbe87e1dace4fbe3aa386dd9fbb8d097576f460fda5ce5eb60781a8276a2e22f89b8530b4bd8b1\n] \n\n[Windows build fix in Darcs.UI.External\nGanesh Sittampalam <ganesh@earth.li>**20210603170522\n Ignore-this: 48da742c87f9e281dd7bb4adb95cf7ca3dd0c7f2b5ed301c72703e8699186f8f5a713d8a98695e64\n] \n\n[TAG 2.17.1\nBen Franksen <ben.franksen@online.de>**20210603145935\n Ignore-this: 78fb3abbe5aaee753f99906467c1fafcd15573995d5878e6d8613762190276de8dfed8cbbcbc0c68\n] \n"